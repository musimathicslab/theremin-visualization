
#line   1 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"





#pragma warning(disable:4008)
#line   7 "/Engine/Public/Platform.ush"


#line   7 "/Engine/Public/FP16Math.ush"




















	
	
	
	
	
	
	










#line   9 "/Engine/Public/Platform.ush"












































#line  66 "/Engine/Public/Platform.ush"


#line   3 "/Engine/Public/BindlessResources.ush"



















#line  43 "/Engine/Public/BindlessResources.ush"

	
	
	

	


#line  72 "/Engine/Public/BindlessResources.ush"

	
	
	

	

































#line  68 "/Engine/Public/Platform.ush"

#line   8 "/Engine/Public/OverloadMacros.ush"







	





	





#line  69 "/Engine/Public/Platform.ush"





#line   7 "/Engine/Public/ShaderVersion.ush"
#line  74 "/Engine/Public/Platform.ush"


























































































































































































	





























	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	














#line 397 "/Engine/Public/Platform.ush"

	














































	
	
	
	
	





































	



	
	
	
	
	



	







#line 520 "/Engine/Public/Platform.ush"




































































void ShaderYield()
{
	
}




























#line 638 "/Engine/Public/Platform.ush"



















































































































































































	

	void WriteDispatchIndirectArgs(RWBuffer<uint> RWIndirectDispatchArgsBuffer, in uint InIndex, in uint InIndirectArgX, in uint InIndirectArgY, in uint InIndirectArgZ)
	{
		RWIndirectDispatchArgsBuffer[3 * InIndex + 0] = InIndirectArgX;
		RWIndirectDispatchArgsBuffer[3 * InIndex + 1] = InIndirectArgY;
		RWIndirectDispatchArgsBuffer[3 * InIndex + 2] = InIndirectArgZ;
	}


void WriteDispatchIndirectArgs(RWBuffer<uint> RWIndirectDispatchArgsBuffer, in uint InIndex, in uint3 InIndirectArg)
{
	WriteDispatchIndirectArgs(RWIndirectDispatchArgsBuffer, InIndex, InIndirectArg.x, InIndirectArg.y, InIndirectArg.z);
}





























float min3(float a, float b, float c)
{
	return min(a, min(b, c));
}

int min3(int a, int b, int c)
{
	return min(a, min(b, c));
}

uint min3(uint a, uint b, uint c)
{
	return min(a, min(b, c));
}

  float2 min3 ( float2 a, float2 b, float2 c) { return float2( min3 (a.x , b.x , c.x ), min3 (a.y , b.y , c.y )); } float3 min3 ( float3 a, float3 b, float3 c) { return float3( min3 (a.xy, b.xy, c.xy), min3 (a.z , b.z , c.z )); } float4 min3 ( float4 a, float4 b, float4 c) { return float4( min3 (a.xy, b.xy, c.xy), min3 (a.zw, b.zw, c.zw)); }
  int2 min3 ( int2 a, int2 b, int2 c) { return int2( min3 (a.x , b.x , c.x ), min3 (a.y , b.y , c.y )); } int3 min3 ( int3 a, int3 b, int3 c) { return int3( min3 (a.xy, b.xy, c.xy), min3 (a.z , b.z , c.z )); } int4 min3 ( int4 a, int4 b, int4 c) { return int4( min3 (a.xy, b.xy, c.xy), min3 (a.zw, b.zw, c.zw)); }
  uint2 min3 ( uint2 a, uint2 b, uint2 c) { return uint2( min3 (a.x , b.x , c.x ), min3 (a.y , b.y , c.y )); } uint3 min3 ( uint3 a, uint3 b, uint3 c) { return uint3( min3 (a.xy, b.xy, c.xy), min3 (a.z , b.z , c.z )); } uint4 min3 ( uint4 a, uint4 b, uint4 c) { return uint4( min3 (a.xy, b.xy, c.xy), min3 (a.zw, b.zw, c.zw)); }

float max3(float a, float b, float c)
{
	return max(a, max(b, c));
}

int max3(int a, int b, int c)
{
	return max(a, max(b, c));
}

uint max3(uint a, uint b, uint c)
{
	return max(a, max(b, c));
}

  float2 max3 ( float2 a, float2 b, float2 c) { return float2( max3 (a.x , b.x , c.x ), max3 (a.y , b.y , c.y )); } float3 max3 ( float3 a, float3 b, float3 c) { return float3( max3 (a.xy, b.xy, c.xy), max3 (a.z , b.z , c.z )); } float4 max3 ( float4 a, float4 b, float4 c) { return float4( max3 (a.xy, b.xy, c.xy), max3 (a.zw, b.zw, c.zw)); }
  int2 max3 ( int2 a, int2 b, int2 c) { return int2( max3 (a.x , b.x , c.x ), max3 (a.y , b.y , c.y )); } int3 max3 ( int3 a, int3 b, int3 c) { return int3( max3 (a.xy, b.xy, c.xy), max3 (a.z , b.z , c.z )); } int4 max3 ( int4 a, int4 b, int4 c) { return int4( max3 (a.xy, b.xy, c.xy), max3 (a.zw, b.zw, c.zw)); }
  uint2 max3 ( uint2 a, uint2 b, uint2 c) { return uint2( max3 (a.x , b.x , c.x ), max3 (a.y , b.y , c.y )); } uint3 max3 ( uint3 a, uint3 b, uint3 c) { return uint3( max3 (a.xy, b.xy, c.xy), max3 (a.z , b.z , c.z )); } uint4 max3 ( uint4 a, uint4 b, uint4 c) { return uint4( max3 (a.xy, b.xy, c.xy), max3 (a.zw, b.zw, c.zw)); }

#line 938 "/Engine/Public/Platform.ush"








#line 972 "/Engine/Public/Platform.ush"

  bool select_internal(bool    c, bool a, bool b) { return bool (c   ? a.x : b.x); } bool2 select_internal(bool    c, bool a, bool2 b) { return bool2(c   ? a   : b.x, c   ? a   : b.y); } bool2 select_internal(bool    c, bool2 a, bool b) { return bool2(c   ? a.x : b  , c   ? a.y : b  ); } bool2 select_internal(bool    c, bool2 a, bool2 b) { return bool2(c   ? a.x : b.x, c   ? a.y : b.y); } bool2 select_internal(bool2   c, bool a, bool b) { return bool2(c.x ? a   : b  , c.y ? a   : b  ); } bool2 select_internal(bool2   c, bool a, bool2 b) { return bool2(c.x ? a   : b.x, c.y ? a   : b.y); } bool2 select_internal(bool2   c, bool2 a, bool b) { return bool2(c.x ? a.x : b  , c.y ? a.y : b  ); } bool2 select_internal(bool2   c, bool2 a, bool2 b) { return bool2(c.x ? a.x : b.x, c.y ? a.y : b.y); } bool3 select_internal(bool    c, bool a, bool3 b) { return bool3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); } bool3 select_internal(bool    c, bool3 a, bool b) { return bool3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); } bool3 select_internal(bool    c, bool3 a, bool3 b) { return bool3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); } bool3 select_internal(bool3   c, bool a, bool b) { return bool3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); } bool3 select_internal(bool3   c, bool a, bool3 b) { return bool3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); } bool3 select_internal(bool3   c, bool3 a, bool b) { return bool3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); } bool3 select_internal(bool3   c, bool3 a, bool3 b) { return bool3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); } bool4 select_internal(bool    c, bool a, bool4 b) { return bool4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); } bool4 select_internal(bool    c, bool4 a, bool b) { return bool4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); } bool4 select_internal(bool    c, bool4 a, bool4 b) { return bool4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); } bool4 select_internal(bool4   c, bool a, bool b) { return bool4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); } bool4 select_internal(bool4   c, bool a, bool4 b) { return bool4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); } bool4 select_internal(bool4   c, bool4 a, bool b) { return bool4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); } bool4 select_internal(bool4   c, bool4 a, bool4 b) { return bool4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); } 




  int select_internal(bool    c, int a, int b) { return int (c   ? a.x : b.x); } int2 select_internal(bool    c, int a, int2 b) { return int2(c   ? a   : b.x, c   ? a   : b.y); } int2 select_internal(bool    c, int2 a, int b) { return int2(c   ? a.x : b  , c   ? a.y : b  ); } int2 select_internal(bool    c, int2 a, int2 b) { return int2(c   ? a.x : b.x, c   ? a.y : b.y); } int2 select_internal(bool2   c, int a, int b) { return int2(c.x ? a   : b  , c.y ? a   : b  ); } int2 select_internal(bool2   c, int a, int2 b) { return int2(c.x ? a   : b.x, c.y ? a   : b.y); } int2 select_internal(bool2   c, int2 a, int b) { return int2(c.x ? a.x : b  , c.y ? a.y : b  ); } int2 select_internal(bool2   c, int2 a, int2 b) { return int2(c.x ? a.x : b.x, c.y ? a.y : b.y); } int3 select_internal(bool    c, int a, int3 b) { return int3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); } int3 select_internal(bool    c, int3 a, int b) { return int3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); } int3 select_internal(bool    c, int3 a, int3 b) { return int3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); } int3 select_internal(bool3   c, int a, int b) { return int3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); } int3 select_internal(bool3   c, int a, int3 b) { return int3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); } int3 select_internal(bool3   c, int3 a, int b) { return int3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); } int3 select_internal(bool3   c, int3 a, int3 b) { return int3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); } int4 select_internal(bool    c, int a, int4 b) { return int4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); } int4 select_internal(bool    c, int4 a, int b) { return int4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); } int4 select_internal(bool    c, int4 a, int4 b) { return int4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); } int4 select_internal(bool4   c, int a, int b) { return int4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); } int4 select_internal(bool4   c, int a, int4 b) { return int4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); } int4 select_internal(bool4   c, int4 a, int b) { return int4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); } int4 select_internal(bool4   c, int4 a, int4 b) { return int4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); } 
  float select_internal(bool    c, float a, float b) { return float (c   ? a.x : b.x); } float2 select_internal(bool    c, float a, float2 b) { return float2(c   ? a   : b.x, c   ? a   : b.y); } float2 select_internal(bool    c, float2 a, float b) { return float2(c   ? a.x : b  , c   ? a.y : b  ); } float2 select_internal(bool    c, float2 a, float2 b) { return float2(c   ? a.x : b.x, c   ? a.y : b.y); } float2 select_internal(bool2   c, float a, float b) { return float2(c.x ? a   : b  , c.y ? a   : b  ); } float2 select_internal(bool2   c, float a, float2 b) { return float2(c.x ? a   : b.x, c.y ? a   : b.y); } float2 select_internal(bool2   c, float2 a, float b) { return float2(c.x ? a.x : b  , c.y ? a.y : b  ); } float2 select_internal(bool2   c, float2 a, float2 b) { return float2(c.x ? a.x : b.x, c.y ? a.y : b.y); } float3 select_internal(bool    c, float a, float3 b) { return float3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); } float3 select_internal(bool    c, float3 a, float b) { return float3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); } float3 select_internal(bool    c, float3 a, float3 b) { return float3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); } float3 select_internal(bool3   c, float a, float b) { return float3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); } float3 select_internal(bool3   c, float a, float3 b) { return float3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); } float3 select_internal(bool3   c, float3 a, float b) { return float3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); } float3 select_internal(bool3   c, float3 a, float3 b) { return float3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); } float4 select_internal(bool    c, float a, float4 b) { return float4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); } float4 select_internal(bool    c, float4 a, float b) { return float4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); } float4 select_internal(bool    c, float4 a, float4 b) { return float4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); } float4 select_internal(bool4   c, float a, float b) { return float4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); } float4 select_internal(bool4   c, float a, float4 b) { return float4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); } float4 select_internal(bool4   c, float4 a, float b) { return float4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); } float4 select_internal(bool4   c, float4 a, float4 b) { return float4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); } 











bool  and_internal(bool  a, bool  b) { return bool(a && b); }
bool2 and_internal(bool2 a, bool2 b) { return bool2(a.x && b.x, a.y && b.y); }
bool3 and_internal(bool3 a, bool3 b) { return bool3(a.x && b.x, a.y && b.y, a.z && b.z); }
bool4 and_internal(bool4 a, bool4 b) { return bool4(a.x && b.x, a.y && b.y, a.z && b.z, a.w && b.w); }

bool  or_internal(bool  a, bool  b) { return bool(a || b); }
bool2 or_internal(bool2 a, bool2 b) { return bool2(a.x || b.x, a.y || b.y); }
bool3 or_internal(bool3 a, bool3 b) { return bool3(a.x || b.x, a.y || b.y, a.z || b.z); }
bool4 or_internal(bool4 a, bool4 b) { return bool4(a.x || b.x, a.y || b.y, a.z || b.z, a.w || b.w); }




#line 1023 "/Engine/Public/Platform.ush"




float  CondMask(bool Cond, float  Src0, float  Src1) { return Cond ? Src0 : Src1; }
float2 CondMask(bool Cond, float2 Src0, float2 Src1) { return Cond ? Src0 : Src1; }
float3 CondMask(bool Cond, float3 Src0, float3 Src1) { return Cond ? Src0 : Src1; }
float4 CondMask(bool Cond, float4 Src0, float4 Src1) { return Cond ? Src0 : Src1; }

int  CondMask(bool Cond, int  Src0, int  Src1) { return Cond ? Src0 : Src1; }
int2 CondMask(bool Cond, int2 Src0, int2 Src1) { return Cond ? Src0 : Src1; }
int3 CondMask(bool Cond, int3 Src0, int3 Src1) { return Cond ? Src0 : Src1; }
int4 CondMask(bool Cond, int4 Src0, int4 Src1) { return Cond ? Src0 : Src1; }

uint  CondMask(bool Cond, uint  Src0, uint  Src1) { return Cond ? Src0 : Src1; }
uint2 CondMask(bool Cond, uint2 Src0, uint2 Src1) { return Cond ? Src0 : Src1; }
uint3 CondMask(bool Cond, uint3 Src0, uint3 Src1) { return Cond ? Src0 : Src1; }
uint4 CondMask(bool Cond, uint4 Src0, uint4 Src1) { return Cond ? Src0 : Src1; }




float UnpackByte0(uint v) { return float(v & 0xff); }
float UnpackByte1(uint v) { return float((v >> 8) & 0xff); }
float UnpackByte2(uint v) { return float((v >> 16) & 0xff); }
float UnpackByte3(uint v) { return float(v >> 24); }









uint BitFieldInsertU32(uint Mask, uint Preserve, uint Enable)
{
	return (Preserve & Mask) | (Enable & ~Mask);
}

uint BitFieldExtractU32(uint Data, uint Size, uint Offset)
{
	
	
	Size &= 31;
	Offset &= 31;
	return (Data >> Offset) & ((1u << Size) - 1u);
}

int BitFieldExtractI32(int Data, uint Size, uint Offset)
{
	Size &= 31u;
	Offset &= 31u;
	const uint Shift = (32u - Size) & 31u;
	const int Value = (Data >> Offset) & int((1u << Size) - 1u);
	return (Value << Shift) >> Shift;
}

uint BitFieldMaskU32(uint MaskWidth, uint MaskLocation)
{
	MaskWidth &= 31u;
	MaskLocation &= 31u;

	return ((1u << MaskWidth) - 1u) << MaskLocation;
}





int MulI24(int I1, int I2)
{
	
	return (I1 * I2);
}

uint MulU24(uint U1, uint U2)
{
	
	return U1 * U2;
}

int MadI24(int I1, int I2, int I3)
{
	
	return I1 * I2 + I3;
}

uint MadU24(uint U1, uint U2, uint U3)
{
	
	return U1 * U2 + U3;
}



uint Padding(uint Value, uint Pow2)
{
	return (Value + Pow2 - 1u) & ~(Pow2 - 1u);
}

uint CeilLog2(uint Value)
{
	return Value < 2u ? 0u : firstbithigh(Value - 1u) + 1u;
}

float BitFieldExtractFloat(uint Bits, uint Count, uint Offset)
{
	return BitFieldExtractU32(Bits, Count, Offset) / (float)BitFieldMaskU32(Count, 0u);
}



uint BitAlignU32(uint High, uint Low, uint Shift)
{
	Shift &= 31u;

	uint Result = Low >> Shift;
	Result |= Shift > 0u ? (High << (32u - Shift)) : 0u;
	return Result;
}




uint ByteAlignU32(uint High, uint Low, uint Shift)
{
	return BitAlignU32(High, Low, Shift * 8);
}











uint2 PackUlongType(uint2 Value)
{
	return Value;
}

uint2 UnpackUlongType(uint2 Value)
{
	return Value;
}




uint MaskedBitCount( uint2 Bits, uint Index )
{
	bool bLow = Index < 32;

	uint Mask = 1u << ( Index - ( bLow ? 0 : 32 ) );
	Mask -= 1;

	uint Offset;
	Offset  = countbits( Bits.x & ( bLow ? Mask : ~0u ) );
	Offset += countbits( Bits.y & ( bLow ? 0 : Mask ) );
	return Offset;
}











#line 1231 "/Engine/Public/Platform.ush"




	









	
	







	
		
	






















#line   7 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"


#line   7 "/Plugin/FX/Niagara/Private/NiagaraShaderVersion.ush"
#line   9 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"



	


	







	const static float PI = 3.1415926535897932f;

	const static float TWO_PI = 3.1415926535897932f*2.0f;

#line   7 "/Engine/Private/Definitions.usf"



























































































































































































































































































#line  27 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"



float4 ModuloPrecise(float4 x, float4 y){ return x - y * trunc(x/y); }
float3 ModuloPrecise(float3 x, float3 y){ return x - y * trunc(x/y); }
float2 ModuloPrecise(float2 x, float2 y){ return x - y * trunc(x/y);}
float ModuloPrecise(float x, float y){ return x - y * trunc(x/y); }
int ModuloPrecise(int x, int y){ return x - y * (x/y); }
int Modulo(int x, int y){  return x - y * (x/y);  }

	

float4 Reciprocal(float4 x){ return 1.0f/x;}
float3 Reciprocal(float3 x){ return 1.0f/x; }
float2 Reciprocal(float2 x){ return 1.0f/x;}
float Reciprocal(float x){ return 1.0f/x; }



bool NiagaraAll(bool b) { return b; }
bool NiagaraAny(bool b) { return b; }









bool NiagaraAll(bool2 b) { return b.x && b.y; }
bool NiagaraAll(bool3 b) { return b.x && b.y && b.z; }
bool NiagaraAll(bool4 b) { return b.x && b.y && b.z && b.w; }
bool NiagaraAny(bool2 b) { return b.x || b.y; }
bool NiagaraAny(bool3 b) { return b.x || b.y || b.z; }
bool NiagaraAny(bool4 b) { return b.x || b.y || b.z || b.w; }






#line 205 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"























float4 rand4(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int4 v = int4(Seed4, Seed1, Seed2, Seed3) * 1664525 + 1013904223;

	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;

	
	
	

	
	return float4((v >> 8) & 0x00ffffff) / 16777216.0; 
	
}







float3 rand3(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int3 v = int3(Seed1, Seed2, Seed4 | (Seed3 << 16)) * 1664525 + 1013904223;

	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return float3((v >> 8) & 0x00ffffff) / 16777216.0; 
}


static int RandomCounterDeterministic = 0;


float rand(float x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * x;
}


float2 rand(float2 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xy * x;
}


float3 rand(float3 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyz * x;
}


float4 rand(float4 x, int Seed1, int Seed2, int Seed3) 
{
	RandomCounterDeterministic += 1;
	return rand4(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyzw * x;
}


int rand(int x, int Seed1, int Seed2, int Seed3)
{
	
	
	RandomCounterDeterministic += 1;
	return int(rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * (x+1));
}





#line 355 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"

	

	float rand(float x); 

	float2 rand(float2 x)
	{
		return float2(rand(x.x), rand(x.y));
	}

	float3 rand(float3 x)
	{
		return float3(rand(x.x), rand(x.y), rand(x.z));
	}

	float4 rand(float4 x) 
	{
		return float4(rand(x.x), rand(x.y), rand(x.z), rand(x.w));
	}
	
	int rand(int x); 




int hash_single(int a)
{
    int x = (a ^ 61) ^ (a >> 16);
	x += x << 3;
	x ^= x >> 4;
	x *= 0x27d4eb2d;
	x ^= x >> 15;
	return x;
}

int hash(int a, int b)
{
	return hash_single(a) ^ hash_single(b * 31);
}

float hash_float(int a, int b)
{
	return (hash(a, b) & 0x00ffffff) / 16777216.0;
}


float hash_float(float a, int b)
{
	return (hash(a * 16777216.0, b) & 0x00ffffff) / 16777216.0;
}


float rand_float(float x)
{
	return rand(x.x);
}

float2 rand_float(float2 x)
{
	return float2(rand_float(x.x), rand_float(x.y));
}

float3 rand_float(float3 x)
{
	return float3(rand_float(x.x), rand_float(x.y), rand_float(x.z));
}

float4 rand_float(float4 x) 
{
	return float4(rand_float(x.x), rand_float(x.y), rand_float(x.z), rand_float(x.w));
}

int rand_int(int x)
{
	
	
	
	return (int) rand_float(x.x);
}


float rand_float(float x, int Seed1, int Seed2, int Seed3)
{
	return rand(x.x, Seed1, Seed2, Seed3);
}

float2 rand_float(float2 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float3 rand_float(float3 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float4 rand_float(float4 x, int Seed1, int Seed2, int Seed3) 
{
	return rand(x, Seed1, Seed2, Seed3);
}

int rand_int(int x, int Seed1, int Seed2, int Seed3)
{
	
	
	return rand(x.x-1, Seed1, Seed2, Seed3);
}






	float noise(float x);
	float noise(float2 x);
	float noise(float3 x);

	
	
	float4 Modulo(float4 x, float4 y);
	float3 Modulo(float3 x, float3 y);
	float2 Modulo(float2 x, float2 y);
	float Modulo(float x, float y);

	
	int ExecIndex();

	
	
	int AcquireIndex(int DataSetID, bool DoAcquire);

	void AcquireID(int DataSetID, out int IDIndex, out int IDAcquireTag);
	void UpdateID(int DataSetID, int IDIndex, int InstanceIndex);

	float InputDataFloat(int DataSetIndex, int RegisterIdx);  
	int InputDataInt(int DataSetIndex, int RegisterIdx);
	bool InputDataBool(int DataSetIndex, int RegisterIdx);
	float InputDataHalf(int DataSetIndex, int RegisterIdx);

	float InputDataNoadvanceFloat(int DataSetIndex, int RegisterIdx);  
	int InputDataNoadvanceInt(int DataSetIndex, int RegisterIdx);
	bool InputDataNoadvanceBool(int DataSetIndex, int RegisterIdx);

	void OutputDataFloat(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value);
	void OutputDataInt(int DataSetIndex, int RegisterIndex, int InstanceIndex, int Value);
	void OutputDataBool(int DataSetIndex, int RegisterIndex, int InstanceIndex, bool Value);
	void OutputDataHalf(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value);









#line 780 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"


	


	int OutputIndex(const int DataSetID, const bool bStageKillsParticles, const bool bIsValid)
	{
	











		return AcquireIndex(DataSetID, bIsValid);
	}



struct NiagaraRandInfo
{
	int Seed1;
	int Seed2;
	int Seed3;
};

#line 841 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"




#line  22 "/Engine/Generated/NiagaraEmitterInstance.ush"
struct NiagaraID
{
	int Index;
	int AcquireTag;
};

cbuffer FNiagaraGlobalParameters
{
	float Engine_WorldDeltaTime;
	float Engine_DeltaTime;
	float Engine_InverseDeltaTime;
	float Engine_Time;
	float Engine_RealTime;
	int Engine_QualityLevel;
	int Engine_PaddingInt32_0;
	int Engine_PaddingInt32_1;
}

cbuffer FNiagaraSystemParameters
{
	float Engine_Owner_TimeSinceRendered;
	float Engine_Owner_LODDistance;
	float Engine_Owner_LODDistanceFraction;
	float Engine_System_Age;
	int Engine_Owner_ExecutionState;
	int Engine_System_TickCount;
	int Engine_System_NumEmitters;
	int Engine_System_NumEmittersAlive;
	int Engine_System_SignificanceIndex;
	int Engine_System_RandomSeed;
	int Engine_System_CurrentTimeStep;
	int Engine_System_NumTimeSteps;
	float Engine_System_TimeStepFraction;
	int Engine_System_NumParticles;
	int Engine_System_PaddingInt32_0;
	int Engine_System_PaddingInt32_1;
}

cbuffer FNiagaraOwnerParameters
{
	float4x4 Engine_Owner_SystemLocalToWorld;
	float4x4 Engine_Owner_SystemWorldToLocal;
	float4x4 Engine_Owner_SystemLocalToWorldTransposed;
	float4x4 Engine_Owner_SystemWorldToLocalTransposed;
	float4x4 Engine_Owner_SystemLocalToWorldNoScale;
	float4x4 Engine_Owner_SystemWorldToLocalNoScale;
	float4 Engine_Owner_Rotation;
	float3 Engine_Owner_Position;
	int Engine_Owner_PaddingInt32_0;
	float3 Engine_Owner_Velocity;
	int Engine_Owner_PaddingInt32_1;
	float3 Engine_Owner_SystemXAxis;
	int Engine_Owner_PaddingInt32_2;
	float3 Engine_Owner_SystemYAxis;
	int Engine_Owner_PaddingInt32_3;
	float3 Engine_Owner_SystemZAxis;
	int Engine_Owner_PaddingInt32_4;
	float3 Engine_Owner_Scale;
	int Engine_Owner_PaddingInt32_5;
	float4 Engine_Owner_LWCTile;
}

cbuffer FNiagaraEmitterParameters
{
	int Engine_Emitter_NumParticles;
	int Engine_Emitter_TotalSpawnedParticles;
	float Engine_Emitter_SpawnCountScale;
	float Emitter_Age;
	int Emitter_RandomSeed;
	int Engine_Emitter_InstanceSeed;
	int Engine_Emitter_PaddingInt32_0;
	int Engine_Emitter_PaddingInt32_1;
}

cbuffer FNiagaraExternalParameters
{
	float Emitter_DistanceTraveled;
	int Emitter_SpawnParticlesInGrid_GridLocationXCount;
	int Emitter_SpawnParticlesInGrid_GridLocationYCount;
	int Emitter_SpawnParticlesInGrid_GridLocationZCount;
	int Emitter_ExecutionState;
	int System_ExecutionState;
	float User_user_alpha;
	float User_user_beta;
	int Engine_ExecutionCount;
	float Emitter_SpawnRate;
	float Emitter_SpawnInterval;
	float Emitter_InterpSpawnStartDt;
	int Emitter_SpawnGroup;
}

cbuffer PREV_FNiagaraGlobalParameters
{
	float PREV_Engine_WorldDeltaTime;
	float PREV_Engine_DeltaTime;
	float PREV_Engine_InverseDeltaTime;
	float PREV_Engine_Time;
	float PREV_Engine_RealTime;
	int PREV_Engine_QualityLevel;
	int PREV_Engine_PaddingInt32_0;
	int PREV_Engine_PaddingInt32_1;
}

cbuffer PREV_FNiagaraSystemParameters
{
	float PREV_Engine_Owner_TimeSinceRendered;
	float PREV_Engine_Owner_LODDistance;
	float PREV_Engine_Owner_LODDistanceFraction;
	float PREV_Engine_System_Age;
	int PREV_Engine_Owner_ExecutionState;
	int PREV_Engine_System_TickCount;
	int PREV_Engine_System_NumEmitters;
	int PREV_Engine_System_NumEmittersAlive;
	int PREV_Engine_System_SignificanceIndex;
	int PREV_Engine_System_RandomSeed;
	int PREV_Engine_System_CurrentTimeStep;
	int PREV_Engine_System_NumTimeSteps;
	float PREV_Engine_System_TimeStepFraction;
	int PREV_Engine_System_NumParticles;
	int PREV_Engine_System_PaddingInt32_0;
	int PREV_Engine_System_PaddingInt32_1;
}

cbuffer PREV_FNiagaraOwnerParameters
{
	float4x4 PREV_Engine_Owner_SystemLocalToWorld;
	float4x4 PREV_Engine_Owner_SystemWorldToLocal;
	float4x4 PREV_Engine_Owner_SystemLocalToWorldTransposed;
	float4x4 PREV_Engine_Owner_SystemWorldToLocalTransposed;
	float4x4 PREV_Engine_Owner_SystemLocalToWorldNoScale;
	float4x4 PREV_Engine_Owner_SystemWorldToLocalNoScale;
	float4 PREV_Engine_Owner_Rotation;
	float3 PREV_Engine_Owner_Position;
	int PREV_Engine_Owner_PaddingInt32_0;
	float3 PREV_Engine_Owner_Velocity;
	int PREV_Engine_Owner_PaddingInt32_1;
	float3 PREV_Engine_Owner_SystemXAxis;
	int PREV_Engine_Owner_PaddingInt32_2;
	float3 PREV_Engine_Owner_SystemYAxis;
	int PREV_Engine_Owner_PaddingInt32_3;
	float3 PREV_Engine_Owner_SystemZAxis;
	int PREV_Engine_Owner_PaddingInt32_4;
	float3 PREV_Engine_Owner_Scale;
	int PREV_Engine_Owner_PaddingInt32_5;
	float4 PREV_Engine_Owner_LWCTile;
}

cbuffer PREV_FNiagaraEmitterParameters
{
	int PREV_Engine_Emitter_NumParticles;
	int PREV_Engine_Emitter_TotalSpawnedParticles;
	float PREV_Engine_Emitter_SpawnCountScale;
	float PREV_Emitter_Age;
	int PREV_Emitter_RandomSeed;
	int PREV_Engine_Emitter_InstanceSeed;
	int PREV_Engine_Emitter_PaddingInt32_0;
	int PREV_Engine_Emitter_PaddingInt32_1;
}

cbuffer PREV_FNiagaraExternalParameters
{
	float PREV_Emitter_DistanceTraveled;
	int PREV_Emitter_SpawnParticlesInGrid_GridLocationXCount;
	int PREV_Emitter_SpawnParticlesInGrid_GridLocationYCount;
	int PREV_Emitter_SpawnParticlesInGrid_GridLocationZCount;
	int PREV_Emitter_ExecutionState;
	int PREV_System_ExecutionState;
	float PREV_User_user_alpha;
	float PREV_User_user_beta;
	int PREV_Engine_ExecutionCount;
	float PREV_Emitter_SpawnRate;
	float PREV_Emitter_SpawnInterval;
	float PREV_Emitter_InterpSpawnStartDt;
	int PREV_Emitter_SpawnGroup;
}

struct FParamMap0_User
{
	float user_alpha;
	float user_beta;
};

struct FParamMap0_Transient
{
	float3 AdvectionVelocity;
	bool DragIgnoreMass;
	bool FirstFrame;
	float4 ParticleColorScaleFactor;
	float PhysicsDeltaTime;
	float PhysicsDrag;
	float3 PhysicsForce;
};

struct FParamMap0_System
{
	int ExecutionState;
};

struct FParamMap0_SolveForcesAndVelocity
{
	float DeltaTime;
	float3 Force;
	float Mass;
	float3 Position;
	float3 PreviousVelocity;
	float3 Velocity;
	bool WritetoIntrinsicProperties;
};

struct FParamMap0_ScratchModule
{
	float alpha;
	float beta;
	float3 pos;
};

struct FParamMap0_ScaleColor
{
	float4 ColorValueToScale;
	float3 ScaleRGB;
};

struct FParamMap0_ParticleState
{
	float DeltaTime;
	bool LetInfinitelyLivedParticlesDieWhenEmitterDeactivates;
	float Lifetime;
	bool LoopParticlesLifetime;
};

struct FParamMap0_Particles_Previous
{
	float3 Position;
	float3 Velocity;
};

struct FParamMap0_Particles_Presolve
{
	float3 PhysicsForce;
	float3 Position;
	float3 Velocity;
};

struct FParamMap0_Particles_Initial
{
	float4 Color;
};

struct FParamMap0_Particles
{
	float Age;
	float4 Color;
	float DistanceTraveled;
	FParamMap0_Particles_Initial Initial;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float NormalizedAge;
	float3 Position;
	FParamMap0_Particles_Presolve Presolve;
	FParamMap0_Particles_Previous Previous;
	float RibbonUVDistance;
	int UniqueID;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity
{
	float IncomingPhysicsDrag;
	float3 IncomingPhysicsForce;
	float3 Position;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_ParticleState
{
	bool FirstFrame;
};

struct FParamMap0_OUTPUT_VAR_GridLocation
{
	float3 GridCellCoordinate;
	float3 GridSpacing;
	float3 GridUVW;
	float3 NormalizedArraylocation;
	float3 XYZCountAsVector;
	float3 XYZSpacing;
};

struct FParamMap0_OUTPUT_VAR
{
	FParamMap0_OUTPUT_VAR_GridLocation GridLocation;
	FParamMap0_OUTPUT_VAR_ParticleState ParticleState;
	FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity SolveForcesAndVelocity;
};

struct FParamMap0_Local_SolveForcesAndVelocity
{
	float3 AdvectionVelocity;
	float DeltaTime;
	bool DragIgnoreMass;
	float3 DragVelocity;
	float InverseDeltaTime;
	float InverseMass;
	float Mass;
	float PhysicsDrag;
	float3 PhysicsForce;
};

struct FParamMap0_Local_InitializeParticle
{
	float InitRIbbonDistance;
};

struct FParamMap0_Local_GridLocation
{
	int GridXCount;
	int GridYCount;
	int GridZCount;
	float3 InitialGridSpacing;
	float3 LocalSpacePosition;
};

struct FParamMap0_Local
{
	FParamMap0_Local_GridLocation GridLocation;
	FParamMap0_Local_InitializeParticle InitializeParticle;
	FParamMap0_Local_SolveForcesAndVelocity SolveForcesAndVelocity;
};

struct FParamMap0_Interpolation
{
	float Emitter_InterpSpawnStartDt;
	int Emitter_SpawnGroup;
	float Emitter_SpawnInterval;
	int InterpSpawn_Index;
	float InterpSpawn_InvSpawnTime;
	float InterpSpawn_InvUpdateTime;
	float InterpSpawn_SpawnTime;
	float InterpSpawn_UpdateTime;
	float SpawnInterp;
};

struct FParamMap0_InitializeParticle
{
	float MaterialRandom;
	int PositionOffsetCoordinateSpace;
};

struct FParamMap0_GridLocation
{
	int CoordinateSpace;
	int ExecIndex;
	float3 GridOrigin;
	int GridXCount;
	int GridYCount;
	int GridZCount;
	bool JitterInsideGridCells;
	bool OverrideRandomSeed;
	int PlacementRandomnessMode;
	bool RandomizeOverridenSeed;
};

struct FParamMap0_Engine_System
{
	float Age;
	int CurrentTimeStep;
	int NumEmitters;
	int NumEmittersAlive;
	int NumParticles;
	int NumTimeSteps;
	int PaddingInt32_0;
	int PaddingInt32_1;
	int RandomSeed;
	int SignificanceIndex;
	int TickCount;
	float TimeStepFraction;
};

struct FParamMap0_Engine_Owner
{
	int ExecutionState;
	float LODDistance;
	float LODDistanceFraction;
	float4 LWCTile;
	int PaddingInt32_0;
	int PaddingInt32_1;
	int PaddingInt32_2;
	int PaddingInt32_3;
	int PaddingInt32_4;
	int PaddingInt32_5;
	float3 Position;
	float4 Rotation;
	float3 Scale;
	float4x4 SystemLocalToWorld;
	float4x4 SystemLocalToWorldNoScale;
	float4x4 SystemLocalToWorldTransposed;
	float4x4 SystemWorldToLocal;
	float4x4 SystemWorldToLocalNoScale;
	float4x4 SystemWorldToLocalTransposed;
	float3 SystemXAxis;
	float3 SystemYAxis;
	float3 SystemZAxis;
	float TimeSinceRendered;
	float3 Velocity;
};

struct FParamMap0_Engine_Emitter
{
	int InstanceSeed;
	int NumParticles;
	int PaddingInt32_0;
	int PaddingInt32_1;
	float SpawnCountScale;
	int TotalSpawnedParticles;
};

struct FParamMap0_Engine
{
	float DeltaTime;
	FParamMap0_Engine_Emitter Emitter;
	int ExecutionCount;
	float InverseDeltaTime;
	FParamMap0_Engine_Owner Owner;
	int PaddingInt32_0;
	int PaddingInt32_1;
	int QualityLevel;
	float RealTime;
	FParamMap0_Engine_System System;
	float Time;
	float WorldDeltaTime;
};

struct FParamMap0_Emitter_SpawnParticlesInGrid
{
	int GridLocationXCount;
	int GridLocationYCount;
	int GridLocationZCount;
};

struct FParamMap0_Emitter
{
	float Age;
	float DistanceTraveled;
	int ExecutionState;
	float InterpSpawnStartDt;
	int RandomSeed;
	int SpawnGroup;
	float SpawnInterval;
	FParamMap0_Emitter_SpawnParticlesInGrid SpawnParticlesInGrid;
	float SpawnRate;
};

struct FParamMap0_DataInstance
{
	bool Alive;
};

struct FParamMap0_ConvertPositionToVector
{
	float3 InputPosition;
};

struct FParamMap0_Array_Previous
{
	int Position;
	int Velocity;
};

struct FParamMap0_Array_Presolve
{
	int PhysicsForce;
	int Position;
	int Velocity;
};

struct FParamMap0_Array_Initial
{
	int Color;
};

struct FParamMap0_Array
{
	int Age;
	int Color;
	int DistanceTraveled;
	FParamMap0_Array_Initial Initial;
	int Lifetime;
	int Mass;
	int MaterialRandom;
	int NormalizedAge;
	int Position;
	FParamMap0_Array_Presolve Presolve;
	FParamMap0_Array_Previous Previous;
	int RibbonUVDistance;
	int UniqueID;
	int Velocity;
};

struct FParamMap0
{
	FParamMap0_Array Array;
	FParamMap0_ConvertPositionToVector ConvertPositionToVector;
	FParamMap0_DataInstance DataInstance;
	FParamMap0_Emitter Emitter;
	FParamMap0_Engine Engine;
	FParamMap0_GridLocation GridLocation;
	FParamMap0_InitializeParticle InitializeParticle;
	FParamMap0_Interpolation Interpolation;
	FParamMap0_Local Local;
	FParamMap0_OUTPUT_VAR OUTPUT_VAR;
	FParamMap0_Particles Particles;
	FParamMap0_ParticleState ParticleState;
	FParamMap0_ScaleColor ScaleColor;
	FParamMap0_ScratchModule ScratchModule;
	FParamMap0_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_System System;
	FParamMap0_Transient Transient;
	FParamMap0_User User;
};

struct FSimulationContext
{
	FParamMap0 MapSpawn;
	FParamMap0 MapUpdate;
};

static float HackSpawnInterp = 1.0;
void NiagaraScript_687_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_(int In_Engine_System_RandomSeed, float In_FloatMin, float In_FloatMax, int In_Seed, int In_Engine_System_TickCount, int In_Particles_UniqueID, int In_Emitter_RandomSeed, int In_Engine_Emitter_InstanceSeed, out float Out_RandomFloat, out bool Out_IsDeterministic, inout FSimulationContext Context);
void NiagaraScript_695_Func_(float3 In_Engine_Owner_Position, out float3 Out_SimulationPosition, inout FSimulationContext Context);
void InitializeParticle_Emitter_Func_(inout FSimulationContext Context);
void NiagaraScript_681_Emitter_Determinism_false_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context);
void NiagaraScript_680_Func_(float2 In_Min, float2 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float2 Out_Result, inout FSimulationContext Context);
void NiagaraScript_682_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float Out_Result, inout FSimulationContext Context);
void NiagaraScript_679_Func_(int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float3 Out_UnitVector3D, out float2 Out_UnitVector2D, inout FSimulationContext Context);
void NiagaraScript_678_Func_(int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float3 Out_Vector, inout FSimulationContext Context);
void NiagaraScript_685_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, out bool Out_LocalToWorld, inout FSimulationContext Context);
void NiagaraScript_684_Emitter_Localspace_true_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, float4x4 In_Engine_Owner_SystemLocalToWorld, float4x4 In_Engine_Owner_SystemWorldToLocal, float4x4 In_Engine_Owner_SystemLocalToWorldNoScale, float4x4 In_Engine_Owner_SystemWorldToLocalNoScale, out float3 Out_OutVector, inout FSimulationContext Context);
void GridLocation_Emitter_Func_(inout FSimulationContext Context);
void ParticleState_Emitter_Func_(inout FSimulationContext Context);
void ConvertPositionToVector_Emitter_Func_(out float3 Out_NewOutput, inout FSimulationContext Context);
void CustomHlsl3E16F8CF42077F42CB3024979CC880C9_Func_(float In_alpha, float In_beta, float In_delta, float In_epsilon, float In_rho, float In_zeta, float3 In_pos, out float3 Out_npos);
void ScratchModule_Emitter_Func_(inout FSimulationContext Context);
void NiagaraScript_698_Func_(float3 In_Velocity, float3 In_AdvectionVelocity, float In_InverseMass, float In_Drag, float In_DeltaTime, bool In_IgnoreMass, out float3 Out_Output, inout FSimulationContext Context);
void NiagaraScript_699_Func_(float3 In_V, float3 In_Fallback, float In_Threshold, out float3 Out_Direction, out float Out_Length, out bool Out_BelowThreshold, inout FSimulationContext Context);
void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context);
void VectorFromFloat_Emitter_Func_(out float3 Out_Vec3, inout FSimulationContext Context);
void ScaleColor_Emitter_Func_(inout FSimulationContext Context);
float GetSpawnInterpolation();
void NiagaraScript_687_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_(int In_Engine_System_RandomSeed, float In_FloatMin, float In_FloatMax, int In_Seed, int In_Engine_System_TickCount, int In_Particles_UniqueID, int In_Emitter_RandomSeed, int In_Engine_Emitter_InstanceSeed, out float Out_RandomFloat, out bool Out_IsDeterministic, inout FSimulationContext Context)
{
	bool Constant22 = false;
	float Result = In_FloatMax - In_FloatMin;
	float Result1 = rand_float(Result);
	float Result2 = In_FloatMin + Result1;
	Out_RandomFloat = Result2;
	Out_IsDeterministic = Constant22;
}

void NiagaraScript_695_Func_(float3 In_Engine_Owner_Position, out float3 Out_SimulationPosition, inout FSimulationContext Context)
{
	float3 Constant31 = float3(0,0,0);
	Out_SimulationPosition = Constant31;
}

void InitializeParticle_Emitter_Func_(inout FSimulationContext Context)
{
	Context.MapSpawn.Particles.MaterialRandom = Context.MapSpawn.InitializeParticle.MaterialRandom;
	float Constant27 = 5;
	Context.MapSpawn.Particles.Lifetime = Constant27;
	float4 Constant28 = float4(1,0.0733118,0,1);
	Context.MapSpawn.Particles.Color = Constant28;
	float Constant29 = 1;
	Context.MapSpawn.Particles.Mass = Constant29;
	float3 Constant30 = float3(0,0,0);
	float3 NiagaraScript_695_Func_Output_SimulationPosition;
	NiagaraScript_695_Func_(Constant30, NiagaraScript_695_Func_Output_SimulationPosition, Context);
	float3 Constant32 = float3(0,0,0);
	float Constant33 = 0;
	float3 Result3 = Constant32 * Constant33;
	float3 Result4 = NiagaraScript_695_Func_Output_SimulationPosition + Result3;
	Context.MapSpawn.Particles.Position = Result4;
	Context.MapSpawn.Local.InitializeParticle.InitRIbbonDistance = Context.MapSpawn.Particles.RibbonUVDistance;
}

void NiagaraScript_681_Emitter_Determinism_false_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context)
{
	bool Constant55 = false;
	int Constant56 = 0;
	bool Result21 = NiagaraAll(In_RandomnessMode == Constant56);
	bool Result22 = Constant55 && Result21;
	int Constant57 = 1;
	bool Result23 = NiagaraAll(In_RandomnessMode == Constant57);
	bool Result24 = Result22 || Result23;
	int Seed_IfResult;
	if(In_OverrideSeed)
	{
	Seed_IfResult = In_Seed;
	}
	else
	{
	Seed_IfResult = Context.MapSpawn.Emitter.RandomSeed;
	}
	int Constant58 = 0;
	int Constant59 = 0;
	int Seed1_IfResult;
	int Seed2_IfResult;
	int Seed3_IfResult;
	if(In_FixedOverrideSeed)
	{
	Seed1_IfResult = Seed_IfResult;
	Seed2_IfResult = Constant58;
	Seed3_IfResult = Constant59;
	}
	else
	{
	Seed1_IfResult = Context.MapSpawn.Particles.UniqueID;
	Seed2_IfResult = Context.MapSpawn.Engine.System.TickCount;
	Seed3_IfResult = Seed_IfResult;
	}
	int Constant60 = -1;
	int Constant61 = -1;
	int Constant62 = -1;
	int Seed1_IfResult1;
	int Seed2_IfResult1;
	int Seed3_IfResult1;
	if(Result24)
	{
	Seed1_IfResult1 = Seed1_IfResult;
	Seed2_IfResult1 = Seed2_IfResult;
	Seed3_IfResult1 = Seed3_IfResult;
	}
	else
	{
	Seed1_IfResult1 = Constant60;
	Seed2_IfResult1 = Constant61;
	Seed3_IfResult1 = Constant62;
	}
	NiagaraRandInfo Output12;
	Output12.Seed1 = Seed1_IfResult1;
	Output12.Seed2 = Seed2_IfResult1;
	Output12.Seed3 = Seed3_IfResult1;
	Out_RandomInfo = Output12;
	Out_UseDeterministicRandoms = Result24;
}

void NiagaraScript_680_Func_(float2 In_Min, float2 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float2 Out_Result, inout FSimulationContext Context)
{
	int Constant51 = (0);
	bool Constant52 = false;
	int Constant53 = 0;
	int Constant54 = (0);
	NiagaraRandInfo NiagaraScript_681_Emitter_Determinism_false_Func_Output_RandomInfo;
	bool NiagaraScript_681_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms;
	NiagaraScript_681_Emitter_Determinism_false_Func_(In_Seed, Constant51, In_OverrideSeed, Constant53, Constant54, In_FixedOverrideSeed, In_RandomnessMode, NiagaraScript_681_Emitter_Determinism_false_Func_Output_RandomInfo, NiagaraScript_681_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms, Context);
	float2 Result25 = In_Max - In_Min;
	int Seed1;
	int Seed2;
	int Seed3;
	Seed1 = NiagaraScript_681_Emitter_Determinism_false_Func_Output_RandomInfo.Seed1;
	Seed2 = NiagaraScript_681_Emitter_Determinism_false_Func_Output_RandomInfo.Seed2;
	Seed3 = NiagaraScript_681_Emitter_Determinism_false_Func_Output_RandomInfo.Seed3;
	float2 Result26 = rand_float(Result25, Seed1, Seed2, Seed3);
	float2 Result27 = rand_float(Result25);
	float2 Random_IfResult;
	if(NiagaraScript_681_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms)
	{
	Random_IfResult = Result26;
	}
	else
	{
	Random_IfResult = Result27;
	}
	float2 Result28 = In_Min + Random_IfResult;
	Out_Result = Result28;
}

void NiagaraScript_682_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float Out_Result, inout FSimulationContext Context)
{
	int Constant68 = (0);
	bool Constant69 = false;
	int Constant70 = 0;
	int Constant71 = (0);
	bool Constant72 = false;
	NiagaraRandInfo NiagaraScript_681_Emitter_Determinism_false_Func_Output_RandomInfo1;
	bool NiagaraScript_681_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms1;
	NiagaraScript_681_Emitter_Determinism_false_Func_(In_Seed, Constant68, In_OverrideSeed, Constant70, Constant71, Constant72, In_RandomnessMode, NiagaraScript_681_Emitter_Determinism_false_Func_Output_RandomInfo1, NiagaraScript_681_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms1, Context);
	float Result36 = In_Max - In_Min;
	int Seed11;
	int Seed21;
	int Seed31;
	Seed11 = NiagaraScript_681_Emitter_Determinism_false_Func_Output_RandomInfo1.Seed1;
	Seed21 = NiagaraScript_681_Emitter_Determinism_false_Func_Output_RandomInfo1.Seed2;
	Seed31 = NiagaraScript_681_Emitter_Determinism_false_Func_Output_RandomInfo1.Seed3;
	float Result37 = rand_float(Result36, Seed11, Seed21, Seed31);
	float Result38 = rand_float(Result36);
	float Random_IfResult1;
	if(NiagaraScript_681_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms1)
	{
	Random_IfResult1 = Result37;
	}
	else
	{
	Random_IfResult1 = Result38;
	}
	float Result39 = In_Min + Random_IfResult1;
	Out_Result = Result39;
}

void NiagaraScript_679_Func_(int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float3 Out_UnitVector3D, out float2 Out_UnitVector2D, inout FSimulationContext Context)
{
	float2 Constant49 = float2(0,-1);
	float2 Constant50 = float2(6.28319,1);
	float2 NiagaraScript_680_Func_Output_Result;
	NiagaraScript_680_Func_(Constant49, Constant50, In_Seed, In_RandomnessMode, In_OverrideSeed, In_FixedOverrideSeed, NiagaraScript_680_Func_Output_Result, Context);
	float Phi;
	float CosASC40ThetaASC41;
	Phi = NiagaraScript_680_Func_Output_Result.x;
	CosASC40ThetaASC41 = NiagaraScript_680_Func_Output_Result.y;
	float Result29 = cos(Phi);
	float Result30 = CosASC40ThetaASC41 * CosASC40ThetaASC41;
	float Result31 = 1 - Result30;
	float Result32 = sqrt(Result31);
	float Result33 = Result29 * Result32;
	float Result34 = sin(Phi);
	float Result35 = Result34 * Result32;
	float3 PositionOnSphere;
	PositionOnSphere.x = Result33;
	PositionOnSphere.y = Result35;
	PositionOnSphere.z = CosASC40ThetaASC41;
	float Constant63 = 0;
	float Constant64 = 6.28319;
	int Constant65 = -1;
	int Constant66 = 0;
	bool Constant67 = false;
	float NiagaraScript_682_Func_Output_Result;
	NiagaraScript_682_Func_(Constant63, Constant64, Constant65, Constant66, Constant67, NiagaraScript_682_Func_Output_Result, Context);
	float Result40 = cos(NiagaraScript_682_Func_Output_Result);
	float Result41 = sin(NiagaraScript_682_Func_Output_Result);
	float2 PositionOnCircle;
	PositionOnCircle.x = Result40;
	PositionOnCircle.y = Result41;
	Out_UnitVector3D = PositionOnSphere;
	Out_UnitVector2D = PositionOnCircle;
}

void NiagaraScript_678_Func_(int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float3 Out_Vector, inout FSimulationContext Context)
{
	float3 NiagaraScript_679_Func_Output_UnitVector3D;
	float2 NiagaraScript_679_Func_Output_UnitVector2D;
	NiagaraScript_679_Func_(In_Seed, In_RandomnessMode, In_OverrideSeed, In_FixedOverrideSeed, NiagaraScript_679_Func_Output_UnitVector3D, NiagaraScript_679_Func_Output_UnitVector2D, Context);
	Out_Vector = NiagaraScript_679_Func_Output_UnitVector3D;
}

void NiagaraScript_685_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, out bool Out_LocalToWorld, inout FSimulationContext Context)
{
	int Constant85 = 0;
	bool Result50 = NiagaraAll(In_SourceSpace == Constant85);
	int Constant86 = 0;
	bool Result51 = NiagaraAll(In_DestinationSpace == Constant86);
	bool Result52 = Result50 && Result51;
	int Constant87 = 1;
	bool Result53 = NiagaraAll(In_SourceSpace == Constant87);
	int Constant88 = 1;
	bool Result54 = NiagaraAll(In_DestinationSpace == Constant88);
	bool Result55 = Result53 && Result54;
	bool Result56 = Result52 || Result55;
	int Constant89 = 2;
	bool Result57 = NiagaraAll(In_SourceSpace == Constant89);
	int Constant90 = 2;
	bool Result58 = NiagaraAll(In_DestinationSpace == Constant90);
	bool Result59 = Result57 && Result58;
	bool Result60 = Result56 || Result59;
	bool Result61 = Result50 && Result58;
	bool Result62 = Result57 && Result51;
	bool Result63 = Result61 || Result62;
	bool Result64 = In_bLocalSpace && Result63;
	bool Result65 = Result60 || Result64;
	bool Result66 = !In_bLocalSpace;
	bool Result67 = Result50 && Result54;
	bool Result68 = Result53 && Result51;
	bool Result69 = Result67 || Result68;
	bool Result70 = Result66 && Result69;
	bool Result71 = Result65 || Result70;
	bool Result72 = In_bLocalSpace && Result67;
	bool Result73 = Result57 && Result54;
	bool Result74 = Result72 || Result73;
	bool Result75 = Result66 && Result62;
	bool Result76 = Result74 || Result75;
	float4x4 Matrix_IfResult;
	if(Result76)
	{
	Matrix_IfResult = In_LocalToWorldTransform;
	}
	else
	{
	Matrix_IfResult = In_WorldToLocalTransform;
	}
	Out_bUseOriginal = Result71;
	Out_OutTransform = Matrix_IfResult;
	Out_LocalToWorld = Result76;
}

void NiagaraScript_684_Emitter_Localspace_true_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, float4x4 In_Engine_Owner_SystemLocalToWorld, float4x4 In_Engine_Owner_SystemWorldToLocal, float4x4 In_Engine_Owner_SystemLocalToWorldNoScale, float4x4 In_Engine_Owner_SystemWorldToLocalNoScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	float4x4 Constant82 = (float4x4)0;
	float4x4 LocalToWorld_SelectResult = Constant82;
	float4x4 Constant83 = (float4x4)0;
	float4x4 WorldToLocal_SelectResult = Constant83;
	LocalToWorld_SelectResult = Context.MapSpawn.Engine.Owner.SystemLocalToWorld;
	WorldToLocal_SelectResult = Context.MapSpawn.Engine.Owner.SystemWorldToLocal;
	if(In_ApplyScale == 0)
	{ 
	LocalToWorld_SelectResult = Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale;
	WorldToLocal_SelectResult = Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool Constant84 = true;
	bool NiagaraScript_685_Func_Output_bUseOriginal;
	float4x4 NiagaraScript_685_Func_Output_OutTransform;
	bool NiagaraScript_685_Func_Output_LocalToWorld;
	NiagaraScript_685_Func_(In_SourceSpace, In_DestinationSpace, LocalToWorld_SelectResult, WorldToLocal_SelectResult, Constant84, NiagaraScript_685_Func_Output_bUseOriginal, NiagaraScript_685_Func_Output_OutTransform, NiagaraScript_685_Func_Output_LocalToWorld, Context);
	float3 Result77 = mul(float4(In_InVector,0.0),NiagaraScript_685_Func_Output_OutTransform).xyz;
	float3 Constant91 = float3(0.0, 0.0, 0.0);
	float3 Vector_SelectResult1 = Constant91;
	Vector_SelectResult1 = In_InVector;
	if(NiagaraScript_685_Func_Output_bUseOriginal == 0)
	{ 
	Vector_SelectResult1 = Result77;
	}
	Out_OutVector = Vector_SelectResult1;
}

void GridLocation_Emitter_Func_(inout FSimulationContext Context)
{
	float3 Output1;
	Output1.x = Context.MapSpawn.GridLocation.GridXCount;
	Output1.y = Context.MapSpawn.GridLocation.GridYCount;
	Output1.z = Context.MapSpawn.GridLocation.GridZCount;
	Context.MapSpawn.Local.GridLocation.GridXCount = Context.MapSpawn.GridLocation.GridXCount;
	Context.MapSpawn.Local.GridLocation.GridYCount = Context.MapSpawn.GridLocation.GridYCount;
	Context.MapSpawn.Local.GridLocation.GridZCount = Context.MapSpawn.GridLocation.GridZCount;
	Context.MapSpawn.OUTPUT_VAR.GridLocation.XYZCountAsVector = Output1;
	int Result6 = Context.MapSpawn.Local.GridLocation.GridXCount * Context.MapSpawn.Local.GridLocation.GridYCount;
	int Result7 = Context.MapSpawn.GridLocation.ExecIndex / Result6;
	int Result8 = Context.MapSpawn.Local.GridLocation.GridXCount * Result7;
	int Result9 = Context.MapSpawn.Local.GridLocation.GridYCount * Result8;
	int Result10 = Context.MapSpawn.GridLocation.ExecIndex - Result9;
	int Result11 = ModuloPrecise(Result10, Context.MapSpawn.Local.GridLocation.GridXCount);
	int Result12 = Result10 / Context.MapSpawn.Local.GridLocation.GridXCount;
	float3 Output11;
	Output11.x = Result11;
	Output11.y = Result12;
	Output11.z = Result7;
	Context.MapSpawn.OUTPUT_VAR.GridLocation.GridCellCoordinate = Output11;
	float Constant43 = 1;
	float3 Result13 = Context.MapSpawn.OUTPUT_VAR.GridLocation.XYZCountAsVector - Constant43;
	float3 Constant44 = float3(1,1,1);
	float3 Result14 = max(Result13, Constant44);
	float3 Result15 = Output11 / Result14;
	float3 Result16 = Result15 + Output11;
	Context.MapSpawn.Local.GridLocation.InitialGridSpacing = Result16;
	float3 Result17 = Context.MapSpawn.Local.GridLocation.InitialGridSpacing / Context.MapSpawn.OUTPUT_VAR.GridLocation.XYZCountAsVector;
	Context.MapSpawn.OUTPUT_VAR.GridLocation.NormalizedArraylocation = Result17;
	Context.MapSpawn.OUTPUT_VAR.GridLocation.GridUVW = Result17;
	float3 Constant45 = float3(32,32,32);
	float3 Constant46 = float3(0,0,0);
	float3 Constant47 = float3(1,1,1);
	float3 Result18 = Constant45 / Context.MapSpawn.OUTPUT_VAR.GridLocation.XYZCountAsVector;
	Context.MapSpawn.OUTPUT_VAR.GridLocation.XYZSpacing = Result18;
	float3 Result19 = Constant46 * Result18;
	int Constant48 = 0;
	bool Result20 = !Context.MapSpawn.GridLocation.RandomizeOverridenSeed;
	float3 NiagaraScript_678_Func_Output_Vector;
	NiagaraScript_678_Func_(Constant48, Context.MapSpawn.GridLocation.PlacementRandomnessMode, Context.MapSpawn.GridLocation.OverrideRandomSeed, Result20, NiagaraScript_678_Func_Output_Vector, Context);
	float3 Constant73 = float3(0.5,0.5,0.5);
	float3 Result42 = NiagaraScript_678_Func_Output_Vector - Constant73;
	float3 Result43 = Result42 * Result18 * Constant47;
	float Constant74 = 0.5;
	float3 Result44 = Context.MapSpawn.OUTPUT_VAR.GridLocation.XYZCountAsVector * Constant74;
	float3 Result45 = Context.MapSpawn.Local.GridLocation.InitialGridSpacing - Result44;
	float3 Result46 = Result18 * Result45;
	float3 Result47 = Result43 + Result46;
	float3 Vector_IfResult;
	if(Context.MapSpawn.GridLocation.JitterInsideGridCells)
	{
	Vector_IfResult = Result47;
	}
	else
	{
	Vector_IfResult = Result46;
	}
	float3 Result48 = Result19 + Vector_IfResult;
	float3 Result49 = Context.MapSpawn.Local.GridLocation.InitialGridSpacing / Context.MapSpawn.OUTPUT_VAR.GridLocation.XYZCountAsVector;
	Context.MapSpawn.Local.GridLocation.LocalSpacePosition = Result48;
	Context.MapSpawn.OUTPUT_VAR.GridLocation.GridSpacing = Result49;
	Context.MapSpawn.OUTPUT_VAR.GridLocation.XYZSpacing = Context.MapSpawn.OUTPUT_VAR.GridLocation.XYZSpacing;
	int Constant75 = 0;
	bool Constant76 = true;
	float4x4 Constant77 = float4x4(1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1);
	float4x4 Constant78 = float4x4(1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1);
	float4x4 Constant79 = float4x4(1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1);
	float4x4 Constant80 = float4x4(1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1);
	bool Constant81 = true;
	float3 NiagaraScript_684_Emitter_Localspace_true_Func_Output_OutVector;
	NiagaraScript_684_Emitter_Localspace_true_Func_(Context.MapSpawn.Local.GridLocation.LocalSpacePosition, Context.MapSpawn.GridLocation.CoordinateSpace, Constant75, Constant76, Constant77, Constant78, Constant79, Constant80, NiagaraScript_684_Emitter_Localspace_true_Func_Output_OutVector, Context);
	float3 Result78 = Context.MapSpawn.GridLocation.GridOrigin + NiagaraScript_684_Emitter_Localspace_true_Func_Output_OutVector;
	Context.MapSpawn.Particles.Position = Result78;
}

void ParticleState_Emitter_Func_(inout FSimulationContext Context)
{
	bool Result79 = NiagaraAll(Context.MapUpdate.Particles.Age <= Context.MapUpdate.Engine.DeltaTime);
	Context.MapUpdate.OUTPUT_VAR.ParticleState.FirstFrame = Result79;
	Context.MapUpdate.Transient.FirstFrame = Result79;
	int Constant95 = 0;
	bool Result80 = NiagaraAll(Context.MapUpdate.Emitter.ExecutionState != Constant95);
	int Constant96 = 0;
	bool Result81 = NiagaraAll(Context.MapUpdate.System.ExecutionState != Constant96);
	bool Result82 = Result80 || Result81;
	bool Result83 = Context.MapUpdate.ParticleState.LetInfinitelyLivedParticlesDieWhenEmitterDeactivates && Result82;
	bool Result84 = !Result83;
	bool Result85 = Context.MapUpdate.ParticleState.LoopParticlesLifetime && Result84;
	float Result86 = Context.MapUpdate.Particles.Age + Context.MapUpdate.ParticleState.DeltaTime;
	float Constant97 = 1e-05;
	float Result87 = max(Context.MapUpdate.ParticleState.Lifetime, Constant97);
	float Result88 = ModuloPrecise(Result86, Result87);
	float Age_IfResult;
	if(Result85)
	{
	Age_IfResult = Result88;
	}
	else
	{
	Age_IfResult = Result86;
	}
	float Constant98 = 0.0001;
	float Result89 = Result87 - Constant98;
	bool Result90 = NiagaraAll(Age_IfResult > Result89);
	bool Result91 = Result90 && Result83;
	bool Constant99 = false;
	bool bool_IfResult;
	if(Result91)
	{
	bool_IfResult = Constant99;
	}
	else
	{
	bool_IfResult = Context.MapUpdate.DataInstance.Alive;
	}
	float Result92 = Age_IfResult / Result87;
	Context.MapUpdate.DataInstance.Alive = bool_IfResult;
	Context.MapUpdate.Particles.Age = Age_IfResult;
	Context.MapUpdate.Particles.NormalizedAge = Result92;
	bool Constant100 = true;
}

void ConvertPositionToVector_Emitter_Func_(out float3 Out_NewOutput, inout FSimulationContext Context)
{
	float3 Output13;
	Output13.x = Context.MapUpdate.ConvertPositionToVector.InputPosition.x;
	Output13.y = Context.MapUpdate.ConvertPositionToVector.InputPosition.y;
	Output13.z = Context.MapUpdate.ConvertPositionToVector.InputPosition.z;
	Out_NewOutput = Output13;
}

void CustomHlsl3E16F8CF42077F42CB3024979CC880C9_Func_(float In_alpha, float In_beta, float In_delta, float In_epsilon, float In_rho, float In_zeta, float3 In_pos, out float3 Out_npos)
{

Out_npos = In_pos;
	float x = In_pos.x;
	float y = In_pos.y;
	float z = In_pos.z;
	
	float dx = (In_alpha * (y-x) + In_delta * x * z;
	float dy = (In_rho * x + In_zeta * y - x * z);
	float dz = (In_beta * z + x * y - In_epsilon * x * x);
	
	
	Out_npos += float3(dx,dy,dz);
}

void ScratchModule_Emitter_Func_(inout FSimulationContext Context)
{
	float Constant105 = 9.9;
	float Constant106 = 1;
	float Constant107 = 0;
	float Constant108 = 0;
	float3 CustomHlsl3E16F8CF42077F42CB3024979CC880C9_Func_Output_npos;
	CustomHlsl3E16F8CF42077F42CB3024979CC880C9_Func_(Context.MapUpdate.ScratchModule.alpha, Context.MapUpdate.ScratchModule.beta, Constant105, Constant106, Constant107, Constant108, Context.MapUpdate.ScratchModule.pos, CustomHlsl3E16F8CF42077F42CB3024979CC880C9_Func_Output_npos);
	Context.MapUpdate.Particles.Velocity = CustomHlsl3E16F8CF42077F42CB3024979CC880C9_Func_Output_npos;
}

void NiagaraScript_698_Func_(float3 In_Velocity, float3 In_AdvectionVelocity, float In_InverseMass, float In_Drag, float In_DeltaTime, bool In_IgnoreMass, out float3 Out_Output, inout FSimulationContext Context)
{
	float3 Result99 = In_Velocity - In_AdvectionVelocity;
	float Result100 = In_Drag * In_InverseMass;
	float Constant118 = (0.0);
	float NiagaraFloat_SelectResult2 = Constant118;
	NiagaraFloat_SelectResult2 = In_Drag;
	if(In_IgnoreMass == 0)
	{ 
	NiagaraFloat_SelectResult2 = Result100;
	}
	float Constant119 = 0;
	float Result101 = max(NiagaraFloat_SelectResult2, Constant119);
	float Result102 = Result101 * In_DeltaTime;
	float Constant120 = 1;
	float Result103 = Result102 + Constant120;
	float3 Result104 = Result99 / Result103;
	float3 Result105 = Result104 + In_AdvectionVelocity;
	Out_Output = Result105;
}

void NiagaraScript_699_Func_(float3 In_V, float3 In_Fallback, float In_Threshold, out float3 Out_Direction, out float Out_Length, out bool Out_BelowThreshold, inout FSimulationContext Context)
{
	float Result107 = dot(In_V,In_V);
	float Result108 = In_Threshold * In_Threshold;
	bool Result109 = NiagaraAll(Result107 < Result108);
	float Result110 = length(In_Fallback);
	float Result111 = rsqrt(Result107);
	float3 Result112 = In_V * Result111;
	float Result113 = Reciprocal(Result111);
	float3 Constant124 = float3(0.0, 0.0, 0.0);
	float3 Direction_SelectResult3 = Constant124;
	float Constant125 = (0.0);
	float Length_SelectResult3 = Constant125;
	Direction_SelectResult3 = In_Fallback;
	Length_SelectResult3 = Result110;
	if(Result109 == 0)
	{ 
	Direction_SelectResult3 = Result112;
	Length_SelectResult3 = Result113;
	}
	Out_Direction = Direction_SelectResult3;
	Out_Length = Length_SelectResult3;
	Out_BelowThreshold = Result109;
}

void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context)
{
	Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime = Context.MapUpdate.SolveForcesAndVelocity.DeltaTime;
	float Constant116 = 1e-05;
	float Result93 = max(Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime, Constant116);
	float Result94 = Reciprocal(Result93);
	Context.MapUpdate.Local.SolveForcesAndVelocity.InverseDeltaTime = Result94;
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce = Context.MapUpdate.SolveForcesAndVelocity.Force;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsForce = Context.MapUpdate.SolveForcesAndVelocity.Force;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.SolveForcesAndVelocity.Velocity;
	Context.MapUpdate.Local.SolveForcesAndVelocity.Mass = Context.MapUpdate.SolveForcesAndVelocity.Mass;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position = Context.MapUpdate.SolveForcesAndVelocity.Position;
	Context.MapUpdate.Particles.Presolve.Velocity = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	Context.MapUpdate.Particles.Presolve.Position = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position;
	Context.MapUpdate.Particles.Presolve.PhysicsForce = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsForce;
	float Constant117 = 1e-06;
	float Result95 = max(Context.MapUpdate.Local.SolveForcesAndVelocity.Mass, Constant117);
	float Result96 = Reciprocal(Result95);
	float3 Result97 = Result96 * Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce;
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce = Result97;
	Context.MapUpdate.Local.SolveForcesAndVelocity.InverseMass = Result96;
	float3 Result98 = Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce * Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime + Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Result98;
	Context.MapUpdate.Local.SolveForcesAndVelocity.AdvectionVelocity = Context.MapUpdate.Transient.AdvectionVelocity;
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsDrag = Context.MapUpdate.Transient.PhysicsDrag;
	Context.MapUpdate.Local.SolveForcesAndVelocity.DragIgnoreMass = Context.MapUpdate.Transient.DragIgnoreMass;
	float3 NiagaraScript_698_Func_Output_Output;
	NiagaraScript_698_Func_(Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity, Context.MapUpdate.Local.SolveForcesAndVelocity.AdvectionVelocity, Context.MapUpdate.Local.SolveForcesAndVelocity.InverseMass, Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsDrag, Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime, Context.MapUpdate.Local.SolveForcesAndVelocity.DragIgnoreMass, NiagaraScript_698_Func_Output_Output, Context);
	float3 Result106 = NiagaraScript_698_Func_Output_Output - Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = NiagaraScript_698_Func_Output_Output;
	Context.MapUpdate.Local.SolveForcesAndVelocity.DragVelocity = Result106;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsDrag = Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsDrag;
	float Constant121 = 1000;
	float3 Constant122 = float3(0,0,0);
	float Constant123 = 1e-05;
	float3 NiagaraScript_699_Func_Output_Direction;
	float NiagaraScript_699_Func_Output_Length;
	bool NiagaraScript_699_Func_Output_BelowThreshold;
	NiagaraScript_699_Func_(Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity, Constant122, Constant123, NiagaraScript_699_Func_Output_Direction, NiagaraScript_699_Func_Output_Length, NiagaraScript_699_Func_Output_BelowThreshold, Context);
	float Constant126 = 0;
	float Result114 = clamp(NiagaraScript_699_Func_Output_Length,Constant126,Constant121);
	float3 Result115 = NiagaraScript_699_Func_Output_Direction * Result114;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Result115;
	float Constant127 = 9999;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	float3 Result116 = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity * Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime;
	float3 Result117 = Result116 + Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position = Result117;
	float3 Position_IfResult;
	float3 Velocity_IfResult;
	if(Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	Position_IfResult = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position;
	Velocity_IfResult = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	}
	else
	{
	Position_IfResult = Context.MapUpdate.Particles.Position;
	Velocity_IfResult = Context.MapUpdate.Particles.Velocity;
	}
	Context.MapUpdate.Particles.Position = Position_IfResult;
	Context.MapUpdate.Particles.Velocity = Velocity_IfResult;
	float3 Constant128 = float3(0,0,0);
	float Constant129 = 0;
	float3 ForceVector_IfResult;
	float Drag_IfResult;
	if(Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	ForceVector_IfResult = Constant128;
	Drag_IfResult = Constant129;
	}
	else
	{
	ForceVector_IfResult = Context.MapUpdate.Transient.PhysicsForce;
	Drag_IfResult = Context.MapUpdate.Transient.PhysicsDrag;
	}
	Context.MapUpdate.Transient.PhysicsForce = ForceVector_IfResult;
	Context.MapUpdate.Transient.PhysicsDrag = Drag_IfResult;
	float3 Result118 = Context.MapUpdate.Particles.Position - Context.MapUpdate.Particles.Previous.Position;
	float Result119 = length(Result118);
	float Constant130 = 0.3333;
	float Result120 = Result119 * Constant130;
	float Constant131 = 1e+08;
	float Result121 = Modulo(Context.MapUpdate.Particles.DistanceTraveled, Constant131);
	float Result122 = Result120 + Result121;
	Context.MapUpdate.Particles.DistanceTraveled = Result122;
	
	int Constant132 = 0;
	
	int Constant133 = 0;
	
	int Constant134 = 0;
}

void VectorFromFloat_Emitter_Func_(out float3 Out_Vec3, inout FSimulationContext Context)
{
	float Constant136 = 5;
	float3 Output14;
	Output14.x = Constant136;
	Output14.y = Constant136;
	Output14.z = Constant136;
	Out_Vec3 = Output14;
}

void ScaleColor_Emitter_Func_(inout FSimulationContext Context)
{
	float Constant139 = 1;
	float4 Output0;
	Output0.r = Context.MapUpdate.ScaleColor.ScaleRGB.x;
	Output0.g = Context.MapUpdate.ScaleColor.ScaleRGB.y;
	Output0.b = Context.MapUpdate.ScaleColor.ScaleRGB.z;
	Output0.a = Constant139;
	float4 Result123 = Context.MapUpdate.Transient.ParticleColorScaleFactor * Output0;
	float4 Result124 = Context.MapUpdate.ScaleColor.ColorValueToScale * Result123;
	Context.MapUpdate.Particles.Color = Result124;
	Context.MapUpdate.Transient.ParticleColorScaleFactor = Result123;
}

float GetSpawnInterpolation()
{
	return HackSpawnInterp;
}


void InterpolateParameters(inout FSimulationContext Context)
{
	int InterpSpawn_Index = ExecIndex();
	float InterpSpawn_SpawnTime = Emitter_InterpSpawnStartDt + (Emitter_SpawnInterval * InterpSpawn_Index);
	float InterpSpawn_UpdateTime = Engine_DeltaTime - InterpSpawn_SpawnTime;
	float InterpSpawn_InvSpawnTime = 1.0 / InterpSpawn_SpawnTime;
	float InterpSpawn_InvUpdateTime = 1.0 / InterpSpawn_UpdateTime;
	float SpawnInterp = InterpSpawn_SpawnTime * Engine_InverseDeltaTime ;
	HackSpawnInterp = SpawnInterp;
	Context.MapSpawn.Interpolation.InterpSpawn_Index = InterpSpawn_Index;
	Context.MapSpawn.Interpolation.InterpSpawn_SpawnTime = InterpSpawn_SpawnTime;
	Context.MapSpawn.Interpolation.InterpSpawn_UpdateTime = InterpSpawn_UpdateTime;
	Context.MapSpawn.Interpolation.InterpSpawn_InvSpawnTime = InterpSpawn_InvSpawnTime;
	Context.MapSpawn.Interpolation.InterpSpawn_InvUpdateTime = InterpSpawn_InvUpdateTime;
	Context.MapSpawn.Interpolation.SpawnInterp = SpawnInterp;
	Context.MapSpawn.Interpolation.Emitter_SpawnInterval = Emitter_SpawnInterval;
	Context.MapSpawn.Interpolation.Emitter_InterpSpawnStartDt = Emitter_InterpSpawnStartDt;
	Context.MapSpawn.Interpolation.Emitter_SpawnGroup = Emitter_SpawnGroup;
	Context.MapSpawn.Engine.Time = lerp(PREV_Engine_Time, Engine_Time, SpawnInterp);
	Context.MapSpawn.Engine.RealTime = lerp(PREV_Engine_RealTime, Engine_RealTime, SpawnInterp);
	Context.MapSpawn.Engine.Owner.TimeSinceRendered = lerp(PREV_Engine_Owner_TimeSinceRendered, Engine_Owner_TimeSinceRendered, SpawnInterp);
	Context.MapSpawn.Engine.Owner.LODDistance = lerp(PREV_Engine_Owner_LODDistance, Engine_Owner_LODDistance, SpawnInterp);
	Context.MapSpawn.Engine.Owner.LODDistanceFraction = lerp(PREV_Engine_Owner_LODDistanceFraction, Engine_Owner_LODDistanceFraction, SpawnInterp);
	Context.MapSpawn.Engine.System.Age = lerp(PREV_Engine_System_Age, Engine_System_Age, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Rotation = lerp(PREV_Engine_Owner_Rotation, Engine_Owner_Rotation, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Position = lerp(PREV_Engine_Owner_Position, Engine_Owner_Position, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Velocity = lerp(PREV_Engine_Owner_Velocity, Engine_Owner_Velocity, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemXAxis = lerp(PREV_Engine_Owner_SystemXAxis, Engine_Owner_SystemXAxis, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemYAxis = lerp(PREV_Engine_Owner_SystemYAxis, Engine_Owner_SystemYAxis, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemZAxis = lerp(PREV_Engine_Owner_SystemZAxis, Engine_Owner_SystemZAxis, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Scale = lerp(PREV_Engine_Owner_Scale, Engine_Owner_Scale, SpawnInterp);
	Context.MapSpawn.Engine.Owner.LWCTile = lerp(PREV_Engine_Owner_LWCTile, Engine_Owner_LWCTile, SpawnInterp);
	Context.MapSpawn.Emitter.Age = lerp(PREV_Emitter_Age, Emitter_Age, SpawnInterp);
	Context.MapSpawn.Emitter.DistanceTraveled = lerp(PREV_Emitter_DistanceTraveled, Emitter_DistanceTraveled, SpawnInterp);
	Context.MapSpawn.User.user_alpha = lerp(PREV_User_user_alpha, User_user_alpha, SpawnInterp);
	Context.MapSpawn.User.user_beta = lerp(PREV_User_user_beta, User_user_beta, SpawnInterp);
	Context.MapUpdate.Engine.DeltaTime = InterpSpawn_UpdateTime;
	Context.MapUpdate.Engine.InverseDeltaTime = InterpSpawn_InvUpdateTime;
}


void HandlePreviousValuesForSpawn(inout FSimulationContext Context)
{
Context.MapSpawn.Particles.Previous.Position = Context.MapSpawn.Particles.Position;

Context.MapSpawn.Particles.Previous.Velocity = Context.MapSpawn.Particles.Velocity;

}


void ReadDataSets(inout FSimulationContext Context)
{
}

void WriteDataSets(inout FSimulationContext Context)
{
}

void SimulateMapSpawn(inout FSimulationContext Context)
{
	
	
	float Constant = (0.0);
	Context.MapSpawn.Particles.MaterialRandom = Constant;
	float Constant1 = (0.0);
	Context.MapSpawn.Particles.Lifetime = Constant1;
	float4 Constant2 = float4(1.0, 1.0, 1.0, 1.0);
	Context.MapSpawn.Particles.Color = Constant2;
	float Constant3 = 1;
	Context.MapSpawn.Particles.Mass = Constant3;
	float3 Constant4 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Particles.Position = Constant4;
	float Constant5 = 0;
	Context.MapSpawn.Particles.Age = Constant5;
	float Constant6 = (0.0);
	Context.MapSpawn.Particles.NormalizedAge = Constant6;
	float3 Constant7 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Particles.Velocity = Constant7;
	float3 Constant8 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Particles.Presolve.Velocity = Constant8;
	float3 Constant9 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Particles.Presolve.Position = Constant9;
	float3 Constant10 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Particles.Presolve.PhysicsForce = Constant10;
	float3 Constant11 = float3(0,0,0);
	Context.MapSpawn.Particles.Previous.Velocity = Constant11;
	float3 Constant12 = float3(0,0,0);
	Context.MapSpawn.Particles.Previous.Position = Constant12;
	float Constant13 = 0;
	Context.MapSpawn.Particles.DistanceTraveled = Constant13;
	
	int Constant14 = (0);
	float Constant15 = 0;
	float Constant16 = 1;
	int Constant17 = -1;
	int Constant18 = (0);
	int Constant19 = 0;
	int Constant20 = (0);
	int Constant21 = (0);
	float NiagaraScript_687_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat;
	bool NiagaraScript_687_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic;
	NiagaraScript_687_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_(Constant14, Constant15, Constant16, Constant17, Constant18, Constant19, Constant20, Constant21, NiagaraScript_687_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat, NiagaraScript_687_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic, Context);
	Context.MapSpawn.InitializeParticle.MaterialRandom = NiagaraScript_687_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat;
	float Constant23 = 5;
	float4 Constant24 = float4(1,0.0733118,0,1);
	float3 Constant25 = float3(0,0,0);
	int Constant26 = 0;
	Context.MapSpawn.InitializeParticle.PositionOffsetCoordinateSpace = Constant26;
	Context.MapSpawn.Particles.RibbonUVDistance = Context.MapSpawn.Emitter.DistanceTraveled;
	EnterStatScope(1 );
	InitializeParticle_Emitter_Func_(Context);
	ExitStatScope();
	Context.MapSpawn.GridLocation.GridXCount = Context.MapSpawn.Emitter.SpawnParticlesInGrid.GridLocationXCount;
	Context.MapSpawn.GridLocation.GridYCount = Context.MapSpawn.Emitter.SpawnParticlesInGrid.GridLocationYCount;
	Context.MapSpawn.GridLocation.GridZCount = Context.MapSpawn.Emitter.SpawnParticlesInGrid.GridLocationZCount;
	int Result5 = ExecIndex();
	Context.MapSpawn.GridLocation.ExecIndex = Result5;
	float3 Constant34 = float3(32,32,32);
	float3 Constant35 = float3(0,0,0);
	float3 Constant36 = float3(1,1,1);
	bool Constant37 = false;
	Context.MapSpawn.GridLocation.JitterInsideGridCells = Constant37;
	int Constant38 = 0;
	int Constant39 = 0;
	Context.MapSpawn.GridLocation.PlacementRandomnessMode = Constant39;
	bool Constant40 = false;
	Context.MapSpawn.GridLocation.OverrideRandomSeed = Constant40;
	bool Constant41 = true;
	Context.MapSpawn.GridLocation.RandomizeOverridenSeed = Constant41;
	Context.MapSpawn.GridLocation.GridOrigin = Context.MapSpawn.Particles.Position;
	int Constant42 = 2;
	Context.MapSpawn.GridLocation.CoordinateSpace = Constant42;
	EnterStatScope(2 );
	GridLocation_Emitter_Func_(Context);
	ExitStatScope();
	


	
	HandlePreviousValuesForSpawn(Context);
	
	Context.MapSpawn.Particles.Initial.Color = Context.MapSpawn.Particles.Color;

	


}
void SimulateMapUpdate(inout FSimulationContext Context)
{
	
	RandomCounterDeterministic = 0;
	bool Constant92 = true;
	Context.MapUpdate.ParticleState.LoopParticlesLifetime = Constant92;
	bool Constant93 = true;
	Context.MapUpdate.DataInstance.Alive = Constant93;
	Context.MapUpdate.ParticleState.DeltaTime = Context.MapUpdate.Engine.DeltaTime;
	Context.MapUpdate.ParticleState.Lifetime = Context.MapUpdate.Particles.Lifetime;
	bool Constant94 = false;
	Context.MapUpdate.ParticleState.LetInfinitelyLivedParticlesDieWhenEmitterDeactivates = Constant94;
	EnterStatScope(3 );
	ParticleState_Emitter_Func_(Context);
	ExitStatScope();
	Context.MapUpdate.ConvertPositionToVector.InputPosition = Context.MapUpdate.Particles.Position;
	float3 ConvertPositionToVector_Emitter_Func_Output_NewOutput;
	ConvertPositionToVector_Emitter_Func_(ConvertPositionToVector_Emitter_Func_Output_NewOutput, Context);
	Context.MapUpdate.ScratchModule.pos = ConvertPositionToVector_Emitter_Func_Output_NewOutput;
	Context.MapUpdate.ScratchModule.alpha = Context.MapUpdate.User.user_alpha;
	Context.MapUpdate.ScratchModule.beta = Context.MapUpdate.User.user_beta;
	float Constant101 = 9.9;
	float Constant102 = 1;
	float Constant103 = 0;
	float Constant104 = 0;
	EnterStatScope(4 );
	ScratchModule_Emitter_Func_(Context);
	ExitStatScope();
	Context.MapUpdate.Transient.PhysicsDeltaTime = Context.MapUpdate.Engine.DeltaTime;
	Context.MapUpdate.SolveForcesAndVelocity.DeltaTime = Context.MapUpdate.Transient.PhysicsDeltaTime;
	float3 Constant109 = float3(0,0,0);
	Context.MapUpdate.Transient.PhysicsForce = Constant109;
	Context.MapUpdate.SolveForcesAndVelocity.Force = Context.MapUpdate.Transient.PhysicsForce;
	Context.MapUpdate.SolveForcesAndVelocity.Velocity = Context.MapUpdate.Particles.Velocity;
	Context.MapUpdate.SolveForcesAndVelocity.Mass = Context.MapUpdate.Particles.Mass;
	Context.MapUpdate.SolveForcesAndVelocity.Position = Context.MapUpdate.Particles.Position;
	float3 Constant110 = float3(0,0,0);
	Context.MapUpdate.Transient.AdvectionVelocity = Constant110;
	float Constant111 = 0;
	Context.MapUpdate.Transient.PhysicsDrag = Constant111;
	bool Constant112 = true;
	Context.MapUpdate.Transient.DragIgnoreMass = Constant112;
	float Constant113 = 1000;
	Context.MapUpdate.SolveForcesAndVelocity.PreviousVelocity = Context.MapUpdate.Particles.Previous.Velocity;
	float Constant114 = 9999;
	bool Constant115 = true;
	Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties = Constant115;
	EnterStatScope(5 );
	SolveForcesAndVelocity_Emitter_Func_(Context);
	ExitStatScope();
	float Constant135 = 5;
	float3 VectorFromFloat_Emitter_Func_Output_Vec3;
	VectorFromFloat_Emitter_Func_(VectorFromFloat_Emitter_Func_Output_Vec3, Context);
	Context.MapUpdate.ScaleColor.ScaleRGB = VectorFromFloat_Emitter_Func_Output_Vec3;
	Context.MapUpdate.ScaleColor.ColorValueToScale = Context.MapUpdate.Particles.Initial.Color;
	float4 Constant137 = float4(1,1,1,1);
	Context.MapUpdate.Transient.ParticleColorScaleFactor = Constant137;
	float Constant138 = 1;
	EnterStatScope(6 );
	ScaleColor_Emitter_Func_(Context);
	ExitStatScope();
	


}
void SimulateMain()
{
EnterStatScope(7 );

	FSimulationContext Context = (FSimulationContext)0;
	Context.MapSpawn.Particles.Age = 0.0f;
	Context.MapSpawn.Particles.Color.r = 0.0f;
	Context.MapSpawn.Particles.Color.g = 0.0f;
	Context.MapSpawn.Particles.Color.b = 0.0f;
	Context.MapSpawn.Particles.Color.a = 0.0f;
	Context.MapSpawn.Particles.DistanceTraveled = 0.0f;
	Context.MapSpawn.Particles.Initial.Color.r = 0.0f;
	Context.MapSpawn.Particles.Initial.Color.g = 0.0f;
	Context.MapSpawn.Particles.Initial.Color.b = 0.0f;
	Context.MapSpawn.Particles.Initial.Color.a = 0.0f;
	Context.MapSpawn.Particles.Lifetime = 0.0f;
	Context.MapSpawn.Particles.Mass = 0.0f;
	Context.MapSpawn.Particles.MaterialRandom = 0.0f;
	Context.MapSpawn.Particles.NormalizedAge = 0.0f;
	Context.MapSpawn.Particles.Position.x = 0.0f;
	Context.MapSpawn.Particles.Position.y = 0.0f;
	Context.MapSpawn.Particles.Position.z = 0.0f;
	Context.MapSpawn.Particles.Presolve.PhysicsForce.x = 0.0f;
	Context.MapSpawn.Particles.Presolve.PhysicsForce.y = 0.0f;
	Context.MapSpawn.Particles.Presolve.PhysicsForce.z = 0.0f;
	Context.MapSpawn.Particles.Presolve.Position.x = 0.0f;
	Context.MapSpawn.Particles.Presolve.Position.y = 0.0f;
	Context.MapSpawn.Particles.Presolve.Position.z = 0.0f;
	Context.MapSpawn.Particles.Presolve.Velocity.x = 0.0f;
	Context.MapSpawn.Particles.Presolve.Velocity.y = 0.0f;
	Context.MapSpawn.Particles.Presolve.Velocity.z = 0.0f;
	Context.MapSpawn.Particles.Previous.Position.x = 0.0f;
	Context.MapSpawn.Particles.Previous.Position.y = 0.0f;
	Context.MapSpawn.Particles.Previous.Position.z = 0.0f;
	Context.MapSpawn.Particles.Previous.Velocity.x = 0.0f;
	Context.MapSpawn.Particles.Previous.Velocity.y = 0.0f;
	Context.MapSpawn.Particles.Previous.Velocity.z = 0.0f;
	Context.MapSpawn.Particles.RibbonUVDistance = 0.0f;
	Context.MapSpawn.Particles.UniqueID = 0;
	Context.MapSpawn.Particles.Velocity.x = 0.0f;
	Context.MapSpawn.Particles.Velocity.y = 0.0f;
	Context.MapSpawn.Particles.Velocity.z = 0.0f;
	Context.MapSpawn.Particles.UniqueID = Engine_Emitter_TotalSpawnedParticles + ExecIndex();
	Context.MapSpawn.Emitter.DistanceTraveled = Emitter_DistanceTraveled;
	Context.MapSpawn.Emitter.SpawnParticlesInGrid.GridLocationXCount = Emitter_SpawnParticlesInGrid_GridLocationXCount;
	Context.MapSpawn.Emitter.SpawnParticlesInGrid.GridLocationYCount = Emitter_SpawnParticlesInGrid_GridLocationYCount;
	Context.MapSpawn.Emitter.SpawnParticlesInGrid.GridLocationZCount = Emitter_SpawnParticlesInGrid_GridLocationZCount;
	Context.MapSpawn.Emitter.RandomSeed = Emitter_RandomSeed;
	Context.MapSpawn.Engine.System.TickCount = Engine_System_TickCount;
	Context.MapSpawn.Engine.Owner.SystemLocalToWorld = Engine_Owner_SystemLocalToWorld;
	Context.MapSpawn.Engine.Owner.SystemWorldToLocal = Engine_Owner_SystemWorldToLocal;
	Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale = Engine_Owner_SystemLocalToWorldNoScale;
	Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale = Engine_Owner_SystemWorldToLocalNoScale;
	Context.MapUpdate.Engine.DeltaTime = Engine_DeltaTime;
	Context.MapUpdate.Emitter.ExecutionState = Emitter_ExecutionState;
	Context.MapUpdate.System.ExecutionState = System_ExecutionState;
	Context.MapUpdate.User.user_alpha = User_user_alpha;
	Context.MapUpdate.User.user_beta = User_user_beta;
	Context.MapUpdate.Engine.Time = Engine_Time;
	Context.MapUpdate.Engine.WorldDeltaTime = Engine_WorldDeltaTime;
	Context.MapUpdate.Engine.InverseDeltaTime = Engine_InverseDeltaTime;
	Context.MapUpdate.Engine.ExecutionCount = Engine_ExecutionCount;
	Context.MapUpdate.Emitter.SpawnRate = Emitter_SpawnRate;
	Context.MapUpdate.Emitter.SpawnInterval = Emitter_SpawnInterval;
	Context.MapUpdate.Emitter.InterpSpawnStartDt = Emitter_InterpSpawnStartDt;
	Context.MapUpdate.Emitter.SpawnGroup = Emitter_SpawnGroup;
	Context.MapUpdate.Engine.Emitter.TotalSpawnedParticles = Engine_Emitter_TotalSpawnedParticles;
	Context.MapUpdate.Emitter.RandomSeed = Emitter_RandomSeed;
	Context.MapUpdate.Engine.Emitter.InstanceSeed = Engine_Emitter_InstanceSeed;
	Context.MapUpdate.Engine.System.RandomSeed = Engine_System_RandomSeed;
	ReadDataSets(Context);
	InterpolateParameters(Context);
EnterStatScope(8 );
	SimulateMapSpawn(Context);
ExitStatScope();
	
	Context.MapUpdate.Particles = Context.MapSpawn.Particles;
		Context.MapUpdate.Particles.Previous.Velocity = Context.MapSpawn.Particles.Velocity;
		Context.MapUpdate.Particles.Previous.Position = Context.MapSpawn.Particles.Position;
	

EnterStatScope(9 );
	SimulateMapUpdate(Context);
ExitStatScope();
	WriteDataSets(Context);
	{
	bool bValid = Context.MapUpdate.DataInstance.Alive;
	int TmpWriteIndex = OutputIndex(0, true, bValid);
	OutputDataFloat(0, 0, TmpWriteIndex, Context.MapUpdate.Particles.Age);
	OutputDataFloat(0, 1, TmpWriteIndex, Context.MapUpdate.Particles.Color.r);
	OutputDataFloat(0, 2, TmpWriteIndex, Context.MapUpdate.Particles.Color.g);
	OutputDataFloat(0, 3, TmpWriteIndex, Context.MapUpdate.Particles.Color.b);
	OutputDataFloat(0, 4, TmpWriteIndex, Context.MapUpdate.Particles.Color.a);
	OutputDataFloat(0, 5, TmpWriteIndex, Context.MapUpdate.Particles.DistanceTraveled);
	OutputDataFloat(0, 6, TmpWriteIndex, Context.MapUpdate.Particles.Initial.Color.r);
	OutputDataFloat(0, 7, TmpWriteIndex, Context.MapUpdate.Particles.Initial.Color.g);
	OutputDataFloat(0, 8, TmpWriteIndex, Context.MapUpdate.Particles.Initial.Color.b);
	OutputDataFloat(0, 9, TmpWriteIndex, Context.MapUpdate.Particles.Initial.Color.a);
	OutputDataFloat(0, 10, TmpWriteIndex, Context.MapUpdate.Particles.Lifetime);
	OutputDataFloat(0, 11, TmpWriteIndex, Context.MapUpdate.Particles.Mass);
	OutputDataFloat(0, 12, TmpWriteIndex, Context.MapUpdate.Particles.MaterialRandom);
	OutputDataFloat(0, 13, TmpWriteIndex, Context.MapUpdate.Particles.NormalizedAge);
	OutputDataFloat(0, 14, TmpWriteIndex, Context.MapUpdate.Particles.Position.x);
	OutputDataFloat(0, 15, TmpWriteIndex, Context.MapUpdate.Particles.Position.y);
	OutputDataFloat(0, 16, TmpWriteIndex, Context.MapUpdate.Particles.Position.z);
	OutputDataFloat(0, 17, TmpWriteIndex, Context.MapUpdate.Particles.Presolve.PhysicsForce.x);
	OutputDataFloat(0, 18, TmpWriteIndex, Context.MapUpdate.Particles.Presolve.PhysicsForce.y);
	OutputDataFloat(0, 19, TmpWriteIndex, Context.MapUpdate.Particles.Presolve.PhysicsForce.z);
	OutputDataFloat(0, 20, TmpWriteIndex, Context.MapUpdate.Particles.Presolve.Position.x);
	OutputDataFloat(0, 21, TmpWriteIndex, Context.MapUpdate.Particles.Presolve.Position.y);
	OutputDataFloat(0, 22, TmpWriteIndex, Context.MapUpdate.Particles.Presolve.Position.z);
	OutputDataFloat(0, 23, TmpWriteIndex, Context.MapUpdate.Particles.Presolve.Velocity.x);
	OutputDataFloat(0, 24, TmpWriteIndex, Context.MapUpdate.Particles.Presolve.Velocity.y);
	OutputDataFloat(0, 25, TmpWriteIndex, Context.MapUpdate.Particles.Presolve.Velocity.z);
	OutputDataFloat(0, 26, TmpWriteIndex, Context.MapUpdate.Particles.Previous.Position.x);
	OutputDataFloat(0, 27, TmpWriteIndex, Context.MapUpdate.Particles.Previous.Position.y);
	OutputDataFloat(0, 28, TmpWriteIndex, Context.MapUpdate.Particles.Previous.Position.z);
	OutputDataFloat(0, 29, TmpWriteIndex, Context.MapUpdate.Particles.Previous.Velocity.x);
	OutputDataFloat(0, 30, TmpWriteIndex, Context.MapUpdate.Particles.Previous.Velocity.y);
	OutputDataFloat(0, 31, TmpWriteIndex, Context.MapUpdate.Particles.Previous.Velocity.z);
	OutputDataFloat(0, 32, TmpWriteIndex, Context.MapUpdate.Particles.RibbonUVDistance);
	OutputDataInt(0, 0, TmpWriteIndex, Context.MapUpdate.Particles.UniqueID);
	OutputDataFloat(0, 33, TmpWriteIndex, Context.MapUpdate.Particles.Velocity.x);
	OutputDataFloat(0, 34, TmpWriteIndex, Context.MapUpdate.Particles.Velocity.y);
	OutputDataFloat(0, 35, TmpWriteIndex, Context.MapUpdate.Particles.Velocity.z);
	}
ExitStatScope();
}
#line 845 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"



#if 0 /*BEGIN_RESOURCE_TABLES*/
NULL, 0
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
#if 0 /*DIRECT COMPILE*/
-directcompile -format=VVM_1 -entry=SimulateMain -shaderPlatformName=None -cs E:/Unreal Engine/Projects/Tirocinio/Saved/ShaderDebugInfo/VM/Game/FX/SA_Particles/source/ParticleSpawnScriptInterpolated/NiagaraEmitterInstanceShader.usf -cflags=2097152 -hlslccflags=1048578 -nocrashreports
#endif /*DIRECT COMPILE*/
