
#line   1 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"





#pragma warning(disable:4008)
#line   7 "/Engine/Public/Platform.ush"


#line   7 "/Engine/Public/FP16Math.ush"




















	
	
	
	
	
	
	










#line   9 "/Engine/Public/Platform.ush"












































#line  66 "/Engine/Public/Platform.ush"


#line   3 "/Engine/Public/BindlessResources.ush"



















#line  43 "/Engine/Public/BindlessResources.ush"

	
	
	

	


#line  72 "/Engine/Public/BindlessResources.ush"

	
	
	

	

































#line  68 "/Engine/Public/Platform.ush"

#line   8 "/Engine/Public/OverloadMacros.ush"







	





	





#line  69 "/Engine/Public/Platform.ush"





#line   7 "/Engine/Public/ShaderVersion.ush"
#line  74 "/Engine/Public/Platform.ush"


























































































































































































	





























	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	














#line 397 "/Engine/Public/Platform.ush"

	














































	
	
	
	
	





































	



	
	
	
	
	



	







#line 520 "/Engine/Public/Platform.ush"




































































void ShaderYield()
{
	
}




























#line 638 "/Engine/Public/Platform.ush"



















































































































































































	

	void WriteDispatchIndirectArgs(RWBuffer<uint> RWIndirectDispatchArgsBuffer, in uint InIndex, in uint InIndirectArgX, in uint InIndirectArgY, in uint InIndirectArgZ)
	{
		RWIndirectDispatchArgsBuffer[3 * InIndex + 0] = InIndirectArgX;
		RWIndirectDispatchArgsBuffer[3 * InIndex + 1] = InIndirectArgY;
		RWIndirectDispatchArgsBuffer[3 * InIndex + 2] = InIndirectArgZ;
	}


void WriteDispatchIndirectArgs(RWBuffer<uint> RWIndirectDispatchArgsBuffer, in uint InIndex, in uint3 InIndirectArg)
{
	WriteDispatchIndirectArgs(RWIndirectDispatchArgsBuffer, InIndex, InIndirectArg.x, InIndirectArg.y, InIndirectArg.z);
}





























float min3(float a, float b, float c)
{
	return min(a, min(b, c));
}

int min3(int a, int b, int c)
{
	return min(a, min(b, c));
}

uint min3(uint a, uint b, uint c)
{
	return min(a, min(b, c));
}

  float2 min3 ( float2 a, float2 b, float2 c) { return float2( min3 (a.x , b.x , c.x ), min3 (a.y , b.y , c.y )); } float3 min3 ( float3 a, float3 b, float3 c) { return float3( min3 (a.xy, b.xy, c.xy), min3 (a.z , b.z , c.z )); } float4 min3 ( float4 a, float4 b, float4 c) { return float4( min3 (a.xy, b.xy, c.xy), min3 (a.zw, b.zw, c.zw)); }
  int2 min3 ( int2 a, int2 b, int2 c) { return int2( min3 (a.x , b.x , c.x ), min3 (a.y , b.y , c.y )); } int3 min3 ( int3 a, int3 b, int3 c) { return int3( min3 (a.xy, b.xy, c.xy), min3 (a.z , b.z , c.z )); } int4 min3 ( int4 a, int4 b, int4 c) { return int4( min3 (a.xy, b.xy, c.xy), min3 (a.zw, b.zw, c.zw)); }
  uint2 min3 ( uint2 a, uint2 b, uint2 c) { return uint2( min3 (a.x , b.x , c.x ), min3 (a.y , b.y , c.y )); } uint3 min3 ( uint3 a, uint3 b, uint3 c) { return uint3( min3 (a.xy, b.xy, c.xy), min3 (a.z , b.z , c.z )); } uint4 min3 ( uint4 a, uint4 b, uint4 c) { return uint4( min3 (a.xy, b.xy, c.xy), min3 (a.zw, b.zw, c.zw)); }

float max3(float a, float b, float c)
{
	return max(a, max(b, c));
}

int max3(int a, int b, int c)
{
	return max(a, max(b, c));
}

uint max3(uint a, uint b, uint c)
{
	return max(a, max(b, c));
}

  float2 max3 ( float2 a, float2 b, float2 c) { return float2( max3 (a.x , b.x , c.x ), max3 (a.y , b.y , c.y )); } float3 max3 ( float3 a, float3 b, float3 c) { return float3( max3 (a.xy, b.xy, c.xy), max3 (a.z , b.z , c.z )); } float4 max3 ( float4 a, float4 b, float4 c) { return float4( max3 (a.xy, b.xy, c.xy), max3 (a.zw, b.zw, c.zw)); }
  int2 max3 ( int2 a, int2 b, int2 c) { return int2( max3 (a.x , b.x , c.x ), max3 (a.y , b.y , c.y )); } int3 max3 ( int3 a, int3 b, int3 c) { return int3( max3 (a.xy, b.xy, c.xy), max3 (a.z , b.z , c.z )); } int4 max3 ( int4 a, int4 b, int4 c) { return int4( max3 (a.xy, b.xy, c.xy), max3 (a.zw, b.zw, c.zw)); }
  uint2 max3 ( uint2 a, uint2 b, uint2 c) { return uint2( max3 (a.x , b.x , c.x ), max3 (a.y , b.y , c.y )); } uint3 max3 ( uint3 a, uint3 b, uint3 c) { return uint3( max3 (a.xy, b.xy, c.xy), max3 (a.z , b.z , c.z )); } uint4 max3 ( uint4 a, uint4 b, uint4 c) { return uint4( max3 (a.xy, b.xy, c.xy), max3 (a.zw, b.zw, c.zw)); }

#line 938 "/Engine/Public/Platform.ush"








#line 972 "/Engine/Public/Platform.ush"

  bool select_internal(bool    c, bool a, bool b) { return bool (c   ? a.x : b.x); } bool2 select_internal(bool    c, bool a, bool2 b) { return bool2(c   ? a   : b.x, c   ? a   : b.y); } bool2 select_internal(bool    c, bool2 a, bool b) { return bool2(c   ? a.x : b  , c   ? a.y : b  ); } bool2 select_internal(bool    c, bool2 a, bool2 b) { return bool2(c   ? a.x : b.x, c   ? a.y : b.y); } bool2 select_internal(bool2   c, bool a, bool b) { return bool2(c.x ? a   : b  , c.y ? a   : b  ); } bool2 select_internal(bool2   c, bool a, bool2 b) { return bool2(c.x ? a   : b.x, c.y ? a   : b.y); } bool2 select_internal(bool2   c, bool2 a, bool b) { return bool2(c.x ? a.x : b  , c.y ? a.y : b  ); } bool2 select_internal(bool2   c, bool2 a, bool2 b) { return bool2(c.x ? a.x : b.x, c.y ? a.y : b.y); } bool3 select_internal(bool    c, bool a, bool3 b) { return bool3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); } bool3 select_internal(bool    c, bool3 a, bool b) { return bool3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); } bool3 select_internal(bool    c, bool3 a, bool3 b) { return bool3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); } bool3 select_internal(bool3   c, bool a, bool b) { return bool3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); } bool3 select_internal(bool3   c, bool a, bool3 b) { return bool3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); } bool3 select_internal(bool3   c, bool3 a, bool b) { return bool3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); } bool3 select_internal(bool3   c, bool3 a, bool3 b) { return bool3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); } bool4 select_internal(bool    c, bool a, bool4 b) { return bool4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); } bool4 select_internal(bool    c, bool4 a, bool b) { return bool4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); } bool4 select_internal(bool    c, bool4 a, bool4 b) { return bool4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); } bool4 select_internal(bool4   c, bool a, bool b) { return bool4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); } bool4 select_internal(bool4   c, bool a, bool4 b) { return bool4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); } bool4 select_internal(bool4   c, bool4 a, bool b) { return bool4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); } bool4 select_internal(bool4   c, bool4 a, bool4 b) { return bool4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); } 




  int select_internal(bool    c, int a, int b) { return int (c   ? a.x : b.x); } int2 select_internal(bool    c, int a, int2 b) { return int2(c   ? a   : b.x, c   ? a   : b.y); } int2 select_internal(bool    c, int2 a, int b) { return int2(c   ? a.x : b  , c   ? a.y : b  ); } int2 select_internal(bool    c, int2 a, int2 b) { return int2(c   ? a.x : b.x, c   ? a.y : b.y); } int2 select_internal(bool2   c, int a, int b) { return int2(c.x ? a   : b  , c.y ? a   : b  ); } int2 select_internal(bool2   c, int a, int2 b) { return int2(c.x ? a   : b.x, c.y ? a   : b.y); } int2 select_internal(bool2   c, int2 a, int b) { return int2(c.x ? a.x : b  , c.y ? a.y : b  ); } int2 select_internal(bool2   c, int2 a, int2 b) { return int2(c.x ? a.x : b.x, c.y ? a.y : b.y); } int3 select_internal(bool    c, int a, int3 b) { return int3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); } int3 select_internal(bool    c, int3 a, int b) { return int3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); } int3 select_internal(bool    c, int3 a, int3 b) { return int3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); } int3 select_internal(bool3   c, int a, int b) { return int3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); } int3 select_internal(bool3   c, int a, int3 b) { return int3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); } int3 select_internal(bool3   c, int3 a, int b) { return int3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); } int3 select_internal(bool3   c, int3 a, int3 b) { return int3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); } int4 select_internal(bool    c, int a, int4 b) { return int4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); } int4 select_internal(bool    c, int4 a, int b) { return int4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); } int4 select_internal(bool    c, int4 a, int4 b) { return int4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); } int4 select_internal(bool4   c, int a, int b) { return int4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); } int4 select_internal(bool4   c, int a, int4 b) { return int4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); } int4 select_internal(bool4   c, int4 a, int b) { return int4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); } int4 select_internal(bool4   c, int4 a, int4 b) { return int4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); } 
  float select_internal(bool    c, float a, float b) { return float (c   ? a.x : b.x); } float2 select_internal(bool    c, float a, float2 b) { return float2(c   ? a   : b.x, c   ? a   : b.y); } float2 select_internal(bool    c, float2 a, float b) { return float2(c   ? a.x : b  , c   ? a.y : b  ); } float2 select_internal(bool    c, float2 a, float2 b) { return float2(c   ? a.x : b.x, c   ? a.y : b.y); } float2 select_internal(bool2   c, float a, float b) { return float2(c.x ? a   : b  , c.y ? a   : b  ); } float2 select_internal(bool2   c, float a, float2 b) { return float2(c.x ? a   : b.x, c.y ? a   : b.y); } float2 select_internal(bool2   c, float2 a, float b) { return float2(c.x ? a.x : b  , c.y ? a.y : b  ); } float2 select_internal(bool2   c, float2 a, float2 b) { return float2(c.x ? a.x : b.x, c.y ? a.y : b.y); } float3 select_internal(bool    c, float a, float3 b) { return float3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); } float3 select_internal(bool    c, float3 a, float b) { return float3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); } float3 select_internal(bool    c, float3 a, float3 b) { return float3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); } float3 select_internal(bool3   c, float a, float b) { return float3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); } float3 select_internal(bool3   c, float a, float3 b) { return float3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); } float3 select_internal(bool3   c, float3 a, float b) { return float3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); } float3 select_internal(bool3   c, float3 a, float3 b) { return float3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); } float4 select_internal(bool    c, float a, float4 b) { return float4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); } float4 select_internal(bool    c, float4 a, float b) { return float4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); } float4 select_internal(bool    c, float4 a, float4 b) { return float4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); } float4 select_internal(bool4   c, float a, float b) { return float4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); } float4 select_internal(bool4   c, float a, float4 b) { return float4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); } float4 select_internal(bool4   c, float4 a, float b) { return float4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); } float4 select_internal(bool4   c, float4 a, float4 b) { return float4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); } 











bool  and_internal(bool  a, bool  b) { return bool(a && b); }
bool2 and_internal(bool2 a, bool2 b) { return bool2(a.x && b.x, a.y && b.y); }
bool3 and_internal(bool3 a, bool3 b) { return bool3(a.x && b.x, a.y && b.y, a.z && b.z); }
bool4 and_internal(bool4 a, bool4 b) { return bool4(a.x && b.x, a.y && b.y, a.z && b.z, a.w && b.w); }

bool  or_internal(bool  a, bool  b) { return bool(a || b); }
bool2 or_internal(bool2 a, bool2 b) { return bool2(a.x || b.x, a.y || b.y); }
bool3 or_internal(bool3 a, bool3 b) { return bool3(a.x || b.x, a.y || b.y, a.z || b.z); }
bool4 or_internal(bool4 a, bool4 b) { return bool4(a.x || b.x, a.y || b.y, a.z || b.z, a.w || b.w); }




#line 1023 "/Engine/Public/Platform.ush"




float  CondMask(bool Cond, float  Src0, float  Src1) { return Cond ? Src0 : Src1; }
float2 CondMask(bool Cond, float2 Src0, float2 Src1) { return Cond ? Src0 : Src1; }
float3 CondMask(bool Cond, float3 Src0, float3 Src1) { return Cond ? Src0 : Src1; }
float4 CondMask(bool Cond, float4 Src0, float4 Src1) { return Cond ? Src0 : Src1; }

int  CondMask(bool Cond, int  Src0, int  Src1) { return Cond ? Src0 : Src1; }
int2 CondMask(bool Cond, int2 Src0, int2 Src1) { return Cond ? Src0 : Src1; }
int3 CondMask(bool Cond, int3 Src0, int3 Src1) { return Cond ? Src0 : Src1; }
int4 CondMask(bool Cond, int4 Src0, int4 Src1) { return Cond ? Src0 : Src1; }

uint  CondMask(bool Cond, uint  Src0, uint  Src1) { return Cond ? Src0 : Src1; }
uint2 CondMask(bool Cond, uint2 Src0, uint2 Src1) { return Cond ? Src0 : Src1; }
uint3 CondMask(bool Cond, uint3 Src0, uint3 Src1) { return Cond ? Src0 : Src1; }
uint4 CondMask(bool Cond, uint4 Src0, uint4 Src1) { return Cond ? Src0 : Src1; }




float UnpackByte0(uint v) { return float(v & 0xff); }
float UnpackByte1(uint v) { return float((v >> 8) & 0xff); }
float UnpackByte2(uint v) { return float((v >> 16) & 0xff); }
float UnpackByte3(uint v) { return float(v >> 24); }









uint BitFieldInsertU32(uint Mask, uint Preserve, uint Enable)
{
	return (Preserve & Mask) | (Enable & ~Mask);
}

uint BitFieldExtractU32(uint Data, uint Size, uint Offset)
{
	
	
	Size &= 31;
	Offset &= 31;
	return (Data >> Offset) & ((1u << Size) - 1u);
}

int BitFieldExtractI32(int Data, uint Size, uint Offset)
{
	Size &= 31u;
	Offset &= 31u;
	const uint Shift = (32u - Size) & 31u;
	const int Value = (Data >> Offset) & int((1u << Size) - 1u);
	return (Value << Shift) >> Shift;
}

uint BitFieldMaskU32(uint MaskWidth, uint MaskLocation)
{
	MaskWidth &= 31u;
	MaskLocation &= 31u;

	return ((1u << MaskWidth) - 1u) << MaskLocation;
}





int MulI24(int I1, int I2)
{
	
	return (I1 * I2);
}

uint MulU24(uint U1, uint U2)
{
	
	return U1 * U2;
}

int MadI24(int I1, int I2, int I3)
{
	
	return I1 * I2 + I3;
}

uint MadU24(uint U1, uint U2, uint U3)
{
	
	return U1 * U2 + U3;
}



uint Padding(uint Value, uint Pow2)
{
	return (Value + Pow2 - 1u) & ~(Pow2 - 1u);
}

uint CeilLog2(uint Value)
{
	return Value < 2u ? 0u : firstbithigh(Value - 1u) + 1u;
}

float BitFieldExtractFloat(uint Bits, uint Count, uint Offset)
{
	return BitFieldExtractU32(Bits, Count, Offset) / (float)BitFieldMaskU32(Count, 0u);
}



uint BitAlignU32(uint High, uint Low, uint Shift)
{
	Shift &= 31u;

	uint Result = Low >> Shift;
	Result |= Shift > 0u ? (High << (32u - Shift)) : 0u;
	return Result;
}




uint ByteAlignU32(uint High, uint Low, uint Shift)
{
	return BitAlignU32(High, Low, Shift * 8);
}











uint2 PackUlongType(uint2 Value)
{
	return Value;
}

uint2 UnpackUlongType(uint2 Value)
{
	return Value;
}




uint MaskedBitCount( uint2 Bits, uint Index )
{
	bool bLow = Index < 32;

	uint Mask = 1u << ( Index - ( bLow ? 0 : 32 ) );
	Mask -= 1;

	uint Offset;
	Offset  = countbits( Bits.x & ( bLow ? Mask : ~0u ) );
	Offset += countbits( Bits.y & ( bLow ? 0 : Mask ) );
	return Offset;
}











#line 1231 "/Engine/Public/Platform.ush"




	









	
	







	
		
	






















#line   7 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"


#line   7 "/Plugin/FX/Niagara/Private/NiagaraShaderVersion.ush"
#line   9 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"



	


	







	const static float PI = 3.1415926535897932f;

	const static float TWO_PI = 3.1415926535897932f*2.0f;

#line   7 "/Engine/Private/Definitions.usf"



























































































































































































































































































#line  27 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"



float4 ModuloPrecise(float4 x, float4 y){ return x - y * trunc(x/y); }
float3 ModuloPrecise(float3 x, float3 y){ return x - y * trunc(x/y); }
float2 ModuloPrecise(float2 x, float2 y){ return x - y * trunc(x/y);}
float ModuloPrecise(float x, float y){ return x - y * trunc(x/y); }
int ModuloPrecise(int x, int y){ return x - y * (x/y); }
int Modulo(int x, int y){  return x - y * (x/y);  }

	

float4 Reciprocal(float4 x){ return 1.0f/x;}
float3 Reciprocal(float3 x){ return 1.0f/x; }
float2 Reciprocal(float2 x){ return 1.0f/x;}
float Reciprocal(float x){ return 1.0f/x; }



bool NiagaraAll(bool b) { return b; }
bool NiagaraAny(bool b) { return b; }









bool NiagaraAll(bool2 b) { return b.x && b.y; }
bool NiagaraAll(bool3 b) { return b.x && b.y && b.z; }
bool NiagaraAll(bool4 b) { return b.x && b.y && b.z && b.w; }
bool NiagaraAny(bool2 b) { return b.x || b.y; }
bool NiagaraAny(bool3 b) { return b.x || b.y || b.z; }
bool NiagaraAny(bool4 b) { return b.x || b.y || b.z || b.w; }






#line 205 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"























float4 rand4(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int4 v = int4(Seed4, Seed1, Seed2, Seed3) * 1664525 + 1013904223;

	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;

	
	
	

	
	return float4((v >> 8) & 0x00ffffff) / 16777216.0; 
	
}







float3 rand3(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int3 v = int3(Seed1, Seed2, Seed4 | (Seed3 << 16)) * 1664525 + 1013904223;

	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return float3((v >> 8) & 0x00ffffff) / 16777216.0; 
}


static int RandomCounterDeterministic = 0;


float rand(float x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * x;
}


float2 rand(float2 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xy * x;
}


float3 rand(float3 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyz * x;
}


float4 rand(float4 x, int Seed1, int Seed2, int Seed3) 
{
	RandomCounterDeterministic += 1;
	return rand4(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyzw * x;
}


int rand(int x, int Seed1, int Seed2, int Seed3)
{
	
	
	RandomCounterDeterministic += 1;
	return int(rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * (x+1));
}





#line 355 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"

	

	float rand(float x); 

	float2 rand(float2 x)
	{
		return float2(rand(x.x), rand(x.y));
	}

	float3 rand(float3 x)
	{
		return float3(rand(x.x), rand(x.y), rand(x.z));
	}

	float4 rand(float4 x) 
	{
		return float4(rand(x.x), rand(x.y), rand(x.z), rand(x.w));
	}
	
	int rand(int x); 




int hash_single(int a)
{
    int x = (a ^ 61) ^ (a >> 16);
	x += x << 3;
	x ^= x >> 4;
	x *= 0x27d4eb2d;
	x ^= x >> 15;
	return x;
}

int hash(int a, int b)
{
	return hash_single(a) ^ hash_single(b * 31);
}

float hash_float(int a, int b)
{
	return (hash(a, b) & 0x00ffffff) / 16777216.0;
}


float hash_float(float a, int b)
{
	return (hash(a * 16777216.0, b) & 0x00ffffff) / 16777216.0;
}


float rand_float(float x)
{
	return rand(x.x);
}

float2 rand_float(float2 x)
{
	return float2(rand_float(x.x), rand_float(x.y));
}

float3 rand_float(float3 x)
{
	return float3(rand_float(x.x), rand_float(x.y), rand_float(x.z));
}

float4 rand_float(float4 x) 
{
	return float4(rand_float(x.x), rand_float(x.y), rand_float(x.z), rand_float(x.w));
}

int rand_int(int x)
{
	
	
	
	return (int) rand_float(x.x);
}


float rand_float(float x, int Seed1, int Seed2, int Seed3)
{
	return rand(x.x, Seed1, Seed2, Seed3);
}

float2 rand_float(float2 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float3 rand_float(float3 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float4 rand_float(float4 x, int Seed1, int Seed2, int Seed3) 
{
	return rand(x, Seed1, Seed2, Seed3);
}

int rand_int(int x, int Seed1, int Seed2, int Seed3)
{
	
	
	return rand(x.x-1, Seed1, Seed2, Seed3);
}






	float noise(float x);
	float noise(float2 x);
	float noise(float3 x);

	
	
	float4 Modulo(float4 x, float4 y);
	float3 Modulo(float3 x, float3 y);
	float2 Modulo(float2 x, float2 y);
	float Modulo(float x, float y);

	
	int ExecIndex();

	
	
	int AcquireIndex(int DataSetID, bool DoAcquire);

	void AcquireID(int DataSetID, out int IDIndex, out int IDAcquireTag);
	void UpdateID(int DataSetID, int IDIndex, int InstanceIndex);

	float InputDataFloat(int DataSetIndex, int RegisterIdx);  
	int InputDataInt(int DataSetIndex, int RegisterIdx);
	bool InputDataBool(int DataSetIndex, int RegisterIdx);
	float InputDataHalf(int DataSetIndex, int RegisterIdx);

	float InputDataNoadvanceFloat(int DataSetIndex, int RegisterIdx);  
	int InputDataNoadvanceInt(int DataSetIndex, int RegisterIdx);
	bool InputDataNoadvanceBool(int DataSetIndex, int RegisterIdx);

	void OutputDataFloat(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value);
	void OutputDataInt(int DataSetIndex, int RegisterIndex, int InstanceIndex, int Value);
	void OutputDataBool(int DataSetIndex, int RegisterIndex, int InstanceIndex, bool Value);
	void OutputDataHalf(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value);









#line 780 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"


	


	int OutputIndex(const int DataSetID, const bool bStageKillsParticles, const bool bIsValid)
	{
	











		return AcquireIndex(DataSetID, bIsValid);
	}



struct NiagaraRandInfo
{
	int Seed1;
	int Seed2;
	int Seed3;
};

#line 841 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"




#line  22 "/Engine/Generated/NiagaraEmitterInstance.ush"
struct NiagaraID
{
	int Index;
	int AcquireTag;
};

cbuffer FNiagaraGlobalParameters
{
	float Engine_WorldDeltaTime;
	float Engine_DeltaTime;
	float Engine_InverseDeltaTime;
	float Engine_Time;
	float Engine_RealTime;
	int Engine_QualityLevel;
	int Engine_PaddingInt32_0;
	int Engine_PaddingInt32_1;
}

cbuffer FNiagaraSystemParameters
{
	float Engine_Owner_TimeSinceRendered;
	float Engine_Owner_LODDistance;
	float Engine_Owner_LODDistanceFraction;
	float Engine_System_Age;
	int Engine_Owner_ExecutionState;
	int Engine_System_TickCount;
	int Engine_System_NumEmitters;
	int Engine_System_NumEmittersAlive;
	int Engine_System_SignificanceIndex;
	int Engine_System_RandomSeed;
	int Engine_System_CurrentTimeStep;
	int Engine_System_NumTimeSteps;
	float Engine_System_TimeStepFraction;
	int Engine_System_NumParticles;
	int Engine_System_PaddingInt32_0;
	int Engine_System_PaddingInt32_1;
}

cbuffer FNiagaraOwnerParameters
{
	float4x4 Engine_Owner_SystemLocalToWorld;
	float4x4 Engine_Owner_SystemWorldToLocal;
	float4x4 Engine_Owner_SystemLocalToWorldTransposed;
	float4x4 Engine_Owner_SystemWorldToLocalTransposed;
	float4x4 Engine_Owner_SystemLocalToWorldNoScale;
	float4x4 Engine_Owner_SystemWorldToLocalNoScale;
	float4 Engine_Owner_Rotation;
	float3 Engine_Owner_Position;
	int Engine_Owner_PaddingInt32_0;
	float3 Engine_Owner_Velocity;
	int Engine_Owner_PaddingInt32_1;
	float3 Engine_Owner_SystemXAxis;
	int Engine_Owner_PaddingInt32_2;
	float3 Engine_Owner_SystemYAxis;
	int Engine_Owner_PaddingInt32_3;
	float3 Engine_Owner_SystemZAxis;
	int Engine_Owner_PaddingInt32_4;
	float3 Engine_Owner_Scale;
	int Engine_Owner_PaddingInt32_5;
	float4 Engine_Owner_LWCTile;
}

cbuffer FNiagaraEmitterParameters
{
	int Engine_Emitter_NumParticles;
	int Engine_Emitter_TotalSpawnedParticles;
	float Engine_Emitter_SpawnCountScale;
	float Emitter_Age;
	int Emitter_RandomSeed;
	int Engine_Emitter_InstanceSeed;
	int Engine_Emitter_PaddingInt32_0;
	int Engine_Emitter_PaddingInt32_1;
}

cbuffer FNiagaraExternalParameters
{
	int Emitter_ExecutionState;
	int System_ExecutionState;
	float User_user_alpha;
	float User_user_beta;
}

struct FParamMap0_User
{
	float user_alpha;
	float user_beta;
};

struct FParamMap0_Transient
{
	float3 AdvectionVelocity;
	bool DragIgnoreMass;
	bool FirstFrame;
	float4 ParticleColorScaleFactor;
	float PhysicsDeltaTime;
	float PhysicsDrag;
	float3 PhysicsForce;
};

struct FParamMap0_System
{
	int ExecutionState;
};

struct FParamMap0_SolveForcesAndVelocity
{
	float DeltaTime;
	float3 Force;
	float Mass;
	float3 Position;
	float3 PreviousVelocity;
	float3 Velocity;
	bool WritetoIntrinsicProperties;
};

struct FParamMap0_ScratchModule
{
	float alpha;
	float beta;
	float3 pos;
};

struct FParamMap0_ScaleColor
{
	float4 ColorValueToScale;
	float3 ScaleRGB;
};

struct FParamMap0_ParticleState
{
	float DeltaTime;
	bool LetInfinitelyLivedParticlesDieWhenEmitterDeactivates;
	float Lifetime;
	bool LoopParticlesLifetime;
};

struct FParamMap0_Particles_Previous
{
	float3 Position;
	float3 Velocity;
};

struct FParamMap0_Particles_Presolve
{
	float3 PhysicsForce;
	float3 Position;
	float3 Velocity;
};

struct FParamMap0_Particles_Initial
{
	float4 Color;
};

struct FParamMap0_Particles
{
	float Age;
	float4 Color;
	float DistanceTraveled;
	FParamMap0_Particles_Initial Initial;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float NormalizedAge;
	float3 Position;
	FParamMap0_Particles_Presolve Presolve;
	FParamMap0_Particles_Previous Previous;
	float RibbonUVDistance;
	int UniqueID;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity
{
	float IncomingPhysicsDrag;
	float3 IncomingPhysicsForce;
	float3 Position;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_ParticleState
{
	bool FirstFrame;
};

struct FParamMap0_OUTPUT_VAR
{
	FParamMap0_OUTPUT_VAR_ParticleState ParticleState;
	FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity SolveForcesAndVelocity;
};

struct FParamMap0_Local_SolveForcesAndVelocity
{
	float3 AdvectionVelocity;
	float DeltaTime;
	bool DragIgnoreMass;
	float3 DragVelocity;
	float InverseDeltaTime;
	float InverseMass;
	float Mass;
	float PhysicsDrag;
	float3 PhysicsForce;
};

struct FParamMap0_Local
{
	FParamMap0_Local_SolveForcesAndVelocity SolveForcesAndVelocity;
};

struct FParamMap0_Engine_System
{
	float Age;
	int CurrentTimeStep;
	int NumEmitters;
	int NumEmittersAlive;
	int NumParticles;
	int NumTimeSteps;
	int PaddingInt32_0;
	int PaddingInt32_1;
	int RandomSeed;
	int SignificanceIndex;
	int TickCount;
	float TimeStepFraction;
};

struct FParamMap0_Engine_Owner
{
	int ExecutionState;
	float LODDistance;
	float LODDistanceFraction;
	float4 LWCTile;
	int PaddingInt32_0;
	int PaddingInt32_1;
	int PaddingInt32_2;
	int PaddingInt32_3;
	int PaddingInt32_4;
	int PaddingInt32_5;
	float3 Position;
	float4 Rotation;
	float3 Scale;
	float4x4 SystemLocalToWorld;
	float4x4 SystemLocalToWorldNoScale;
	float4x4 SystemLocalToWorldTransposed;
	float4x4 SystemWorldToLocal;
	float4x4 SystemWorldToLocalNoScale;
	float4x4 SystemWorldToLocalTransposed;
	float3 SystemXAxis;
	float3 SystemYAxis;
	float3 SystemZAxis;
	float TimeSinceRendered;
	float3 Velocity;
};

struct FParamMap0_Engine_Emitter
{
	int InstanceSeed;
	int NumParticles;
	int PaddingInt32_0;
	int PaddingInt32_1;
	float SpawnCountScale;
	int TotalSpawnedParticles;
};

struct FParamMap0_Engine
{
	float DeltaTime;
	FParamMap0_Engine_Emitter Emitter;
	float InverseDeltaTime;
	FParamMap0_Engine_Owner Owner;
	int PaddingInt32_0;
	int PaddingInt32_1;
	int QualityLevel;
	float RealTime;
	FParamMap0_Engine_System System;
	float Time;
	float WorldDeltaTime;
};

struct FParamMap0_Emitter
{
	float Age;
	int ExecutionState;
	int RandomSeed;
};

struct FParamMap0_DataInstance
{
	bool Alive;
};

struct FParamMap0_ConvertPositionToVector
{
	float3 InputPosition;
};

struct FParamMap0_Array_Previous
{
	int Position;
	int Velocity;
};

struct FParamMap0_Array_Presolve
{
	int PhysicsForce;
	int Position;
	int Velocity;
};

struct FParamMap0_Array_Initial
{
	int Color;
};

struct FParamMap0_Array
{
	int Age;
	int Color;
	int DistanceTraveled;
	FParamMap0_Array_Initial Initial;
	int Lifetime;
	int Mass;
	int MaterialRandom;
	int NormalizedAge;
	int Position;
	FParamMap0_Array_Presolve Presolve;
	FParamMap0_Array_Previous Previous;
	int RibbonUVDistance;
	int UniqueID;
	int Velocity;
};

struct FParamMap0
{
	FParamMap0_Array Array;
	FParamMap0_ConvertPositionToVector ConvertPositionToVector;
	FParamMap0_DataInstance DataInstance;
	FParamMap0_Emitter Emitter;
	FParamMap0_Engine Engine;
	FParamMap0_Local Local;
	FParamMap0_OUTPUT_VAR OUTPUT_VAR;
	FParamMap0_Particles Particles;
	FParamMap0_ParticleState ParticleState;
	FParamMap0_ScaleColor ScaleColor;
	FParamMap0_ScratchModule ScratchModule;
	FParamMap0_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_System System;
	FParamMap0_Transient Transient;
	FParamMap0_User User;
};

struct FSimulationContext
{
	FParamMap0 Map;
};

static float HackSpawnInterp = 1.0;
void ParticleState_Emitter_Func_(inout FSimulationContext Context);
void ConvertPositionToVector_Emitter_Func_(out float3 Out_NewOutput, inout FSimulationContext Context);
void CustomHlsl3E16F8CF42077F42CB3024979CC880C9_Func_(float In_alpha, float In_beta, float In_delta, float In_epsilon, float In_rho, float In_zeta, float3 In_pos, out float3 Out_npos);
void ScratchModule_Emitter_Func_(inout FSimulationContext Context);
void NiagaraScript_698_Particle_Func_(float3 In_Velocity, float3 In_AdvectionVelocity, float In_InverseMass, float In_Drag, float In_DeltaTime, bool In_IgnoreMass, out float3 Out_Output, inout FSimulationContext Context);
void NiagaraScript_699_Particle_Func_(float3 In_V, float3 In_Fallback, float In_Threshold, out float3 Out_Direction, out float Out_Length, out bool Out_BelowThreshold, inout FSimulationContext Context);
void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context);
void VectorFromFloat_Emitter_Func_(out float3 Out_Vec3, inout FSimulationContext Context);
void ScaleColor_Emitter_Func_(inout FSimulationContext Context);
float GetSpawnInterpolation();
void ParticleState_Emitter_Func_(inout FSimulationContext Context)
{
	bool Result = NiagaraAll(Context.Map.Particles.Age <= Context.Map.Engine.DeltaTime);
	Context.Map.OUTPUT_VAR.ParticleState.FirstFrame = Result;
	Context.Map.Transient.FirstFrame = Result;
	int Constant3 = 0;
	bool Result1 = NiagaraAll(Context.Map.Emitter.ExecutionState != Constant3);
	int Constant4 = 0;
	bool Result2 = NiagaraAll(Context.Map.System.ExecutionState != Constant4);
	bool Result3 = Result1 || Result2;
	bool Result4 = Context.Map.ParticleState.LetInfinitelyLivedParticlesDieWhenEmitterDeactivates && Result3;
	bool Result5 = !Result4;
	bool Result6 = Context.Map.ParticleState.LoopParticlesLifetime && Result5;
	float Result7 = Context.Map.Particles.Age + Context.Map.ParticleState.DeltaTime;
	float Constant5 = 1e-05;
	float Result8 = max(Context.Map.ParticleState.Lifetime, Constant5);
	float Result9 = ModuloPrecise(Result7, Result8);
	float Age_IfResult;
	if(Result6)
	{
	Age_IfResult = Result9;
	}
	else
	{
	Age_IfResult = Result7;
	}
	float Constant6 = 0.0001;
	float Result10 = Result8 - Constant6;
	bool Result11 = NiagaraAll(Age_IfResult > Result10);
	bool Result12 = Result11 && Result4;
	bool Constant7 = false;
	bool bool_IfResult;
	if(Result12)
	{
	bool_IfResult = Constant7;
	}
	else
	{
	bool_IfResult = Context.Map.DataInstance.Alive;
	}
	float Result13 = Age_IfResult / Result8;
	Context.Map.DataInstance.Alive = bool_IfResult;
	Context.Map.Particles.Age = Age_IfResult;
	Context.Map.Particles.NormalizedAge = Result13;
	bool Constant8 = true;
}

void ConvertPositionToVector_Emitter_Func_(out float3 Out_NewOutput, inout FSimulationContext Context)
{
	float3 Output1;
	Output1.x = Context.Map.ConvertPositionToVector.InputPosition.x;
	Output1.y = Context.Map.ConvertPositionToVector.InputPosition.y;
	Output1.z = Context.Map.ConvertPositionToVector.InputPosition.z;
	Out_NewOutput = Output1;
}

void CustomHlsl3E16F8CF42077F42CB3024979CC880C9_Func_(float In_alpha, float In_beta, float In_delta, float In_epsilon, float In_rho, float In_zeta, float3 In_pos, out float3 Out_npos)
{

Out_npos = In_pos;
	float x = In_pos.x;
	float y = In_pos.y;
	float z = In_pos.z;
	
	float dx = (In_alpha * (y-x) + In_delta * x * z;
	float dy = (In_rho * x + In_zeta * y - x * z);
	float dz = (In_beta * z + x * y - In_epsilon * x * x);
	
	
	Out_npos += float3(dx,dy,dz);
}

void ScratchModule_Emitter_Func_(inout FSimulationContext Context)
{
	float Constant13 = 9.9;
	float Constant14 = 1;
	float Constant15 = 0;
	float Constant16 = 0;
	float3 CustomHlsl3E16F8CF42077F42CB3024979CC880C9_Func_Output_npos;
	CustomHlsl3E16F8CF42077F42CB3024979CC880C9_Func_(Context.Map.ScratchModule.alpha, Context.Map.ScratchModule.beta, Constant13, Constant14, Constant15, Constant16, Context.Map.ScratchModule.pos, CustomHlsl3E16F8CF42077F42CB3024979CC880C9_Func_Output_npos);
	Context.Map.Particles.Velocity = CustomHlsl3E16F8CF42077F42CB3024979CC880C9_Func_Output_npos;
}

void NiagaraScript_698_Particle_Func_(float3 In_Velocity, float3 In_AdvectionVelocity, float In_InverseMass, float In_Drag, float In_DeltaTime, bool In_IgnoreMass, out float3 Out_Output, inout FSimulationContext Context)
{
	float3 Result20 = In_Velocity - In_AdvectionVelocity;
	float Result21 = In_Drag * In_InverseMass;
	float Constant26 = (0.0);
	float NiagaraFloat_SelectResult = Constant26;
	NiagaraFloat_SelectResult = In_Drag;
	if(In_IgnoreMass == 0)
	{ 
	NiagaraFloat_SelectResult = Result21;
	}
	float Constant27 = 0;
	float Result22 = max(NiagaraFloat_SelectResult, Constant27);
	float Result23 = Result22 * In_DeltaTime;
	float Constant28 = 1;
	float Result24 = Result23 + Constant28;
	float3 Result25 = Result20 / Result24;
	float3 Result26 = Result25 + In_AdvectionVelocity;
	Out_Output = Result26;
}

void NiagaraScript_699_Particle_Func_(float3 In_V, float3 In_Fallback, float In_Threshold, out float3 Out_Direction, out float Out_Length, out bool Out_BelowThreshold, inout FSimulationContext Context)
{
	float Result28 = dot(In_V,In_V);
	float Result29 = In_Threshold * In_Threshold;
	bool Result30 = NiagaraAll(Result28 < Result29);
	float Result31 = length(In_Fallback);
	float Result32 = rsqrt(Result28);
	float3 Result33 = In_V * Result32;
	float Result34 = Reciprocal(Result32);
	float3 Constant32 = float3(0.0, 0.0, 0.0);
	float3 Direction_SelectResult1 = Constant32;
	float Constant33 = (0.0);
	float Length_SelectResult1 = Constant33;
	Direction_SelectResult1 = In_Fallback;
	Length_SelectResult1 = Result31;
	if(Result30 == 0)
	{ 
	Direction_SelectResult1 = Result33;
	Length_SelectResult1 = Result34;
	}
	Out_Direction = Direction_SelectResult1;
	Out_Length = Length_SelectResult1;
	Out_BelowThreshold = Result30;
}

void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context)
{
	Context.Map.Local.SolveForcesAndVelocity.DeltaTime = Context.Map.SolveForcesAndVelocity.DeltaTime;
	float Constant24 = 1e-05;
	float Result14 = max(Context.Map.Local.SolveForcesAndVelocity.DeltaTime, Constant24);
	float Result15 = Reciprocal(Result14);
	Context.Map.Local.SolveForcesAndVelocity.InverseDeltaTime = Result15;
	Context.Map.Local.SolveForcesAndVelocity.PhysicsForce = Context.Map.SolveForcesAndVelocity.Force;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsForce = Context.Map.SolveForcesAndVelocity.Force;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.Map.SolveForcesAndVelocity.Velocity;
	Context.Map.Local.SolveForcesAndVelocity.Mass = Context.Map.SolveForcesAndVelocity.Mass;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Position = Context.Map.SolveForcesAndVelocity.Position;
	Context.Map.Particles.Presolve.Velocity = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	Context.Map.Particles.Presolve.Position = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Position;
	Context.Map.Particles.Presolve.PhysicsForce = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsForce;
	float Constant25 = 1e-06;
	float Result16 = max(Context.Map.Local.SolveForcesAndVelocity.Mass, Constant25);
	float Result17 = Reciprocal(Result16);
	float3 Result18 = Result17 * Context.Map.Local.SolveForcesAndVelocity.PhysicsForce;
	Context.Map.Local.SolveForcesAndVelocity.PhysicsForce = Result18;
	Context.Map.Local.SolveForcesAndVelocity.InverseMass = Result17;
	float3 Result19 = Context.Map.Local.SolveForcesAndVelocity.PhysicsForce * Context.Map.Local.SolveForcesAndVelocity.DeltaTime + Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Result19;
	Context.Map.Local.SolveForcesAndVelocity.AdvectionVelocity = Context.Map.Transient.AdvectionVelocity;
	Context.Map.Local.SolveForcesAndVelocity.PhysicsDrag = Context.Map.Transient.PhysicsDrag;
	Context.Map.Local.SolveForcesAndVelocity.DragIgnoreMass = Context.Map.Transient.DragIgnoreMass;
	float3 NiagaraScript_698_Particle_Func_Output_Output;
	NiagaraScript_698_Particle_Func_(Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity, Context.Map.Local.SolveForcesAndVelocity.AdvectionVelocity, Context.Map.Local.SolveForcesAndVelocity.InverseMass, Context.Map.Local.SolveForcesAndVelocity.PhysicsDrag, Context.Map.Local.SolveForcesAndVelocity.DeltaTime, Context.Map.Local.SolveForcesAndVelocity.DragIgnoreMass, NiagaraScript_698_Particle_Func_Output_Output, Context);
	float3 Result27 = NiagaraScript_698_Particle_Func_Output_Output - Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = NiagaraScript_698_Particle_Func_Output_Output;
	Context.Map.Local.SolveForcesAndVelocity.DragVelocity = Result27;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsDrag = Context.Map.Local.SolveForcesAndVelocity.PhysicsDrag;
	float Constant29 = 1000;
	float3 Constant30 = float3(0,0,0);
	float Constant31 = 1e-05;
	float3 NiagaraScript_699_Particle_Func_Output_Direction;
	float NiagaraScript_699_Particle_Func_Output_Length;
	bool NiagaraScript_699_Particle_Func_Output_BelowThreshold;
	NiagaraScript_699_Particle_Func_(Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity, Constant30, Constant31, NiagaraScript_699_Particle_Func_Output_Direction, NiagaraScript_699_Particle_Func_Output_Length, NiagaraScript_699_Particle_Func_Output_BelowThreshold, Context);
	float Constant34 = 0;
	float Result35 = clamp(NiagaraScript_699_Particle_Func_Output_Length,Constant34,Constant29);
	float3 Result36 = NiagaraScript_699_Particle_Func_Output_Direction * Result35;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Result36;
	float Constant35 = 9999;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	float3 Result37 = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity * Context.Map.Local.SolveForcesAndVelocity.DeltaTime;
	float3 Result38 = Result37 + Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Position;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Position = Result38;
	float3 Position_IfResult;
	float3 Velocity_IfResult;
	if(Context.Map.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	Position_IfResult = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Position;
	Velocity_IfResult = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	}
	else
	{
	Position_IfResult = Context.Map.Particles.Position;
	Velocity_IfResult = Context.Map.Particles.Velocity;
	}
	Context.Map.Particles.Position = Position_IfResult;
	Context.Map.Particles.Velocity = Velocity_IfResult;
	float3 Constant36 = float3(0,0,0);
	float Constant37 = 0;
	float3 ForceVector_IfResult;
	float Drag_IfResult;
	if(Context.Map.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	ForceVector_IfResult = Constant36;
	Drag_IfResult = Constant37;
	}
	else
	{
	ForceVector_IfResult = Context.Map.Transient.PhysicsForce;
	Drag_IfResult = Context.Map.Transient.PhysicsDrag;
	}
	Context.Map.Transient.PhysicsForce = ForceVector_IfResult;
	Context.Map.Transient.PhysicsDrag = Drag_IfResult;
	float3 Result39 = Context.Map.Particles.Position - Context.Map.Particles.Previous.Position;
	float Result40 = length(Result39);
	float Constant38 = 0.3333;
	float Result41 = Result40 * Constant38;
	float Constant39 = 1e+08;
	float Result42 = Modulo(Context.Map.Particles.DistanceTraveled, Constant39);
	float Result43 = Result41 + Result42;
	Context.Map.Particles.DistanceTraveled = Result43;
	
	int Constant40 = 0;
	
	int Constant41 = 0;
	
	int Constant42 = 0;
}

void VectorFromFloat_Emitter_Func_(out float3 Out_Vec3, inout FSimulationContext Context)
{
	float Constant44 = 5;
	float3 Output11;
	Output11.x = Constant44;
	Output11.y = Constant44;
	Output11.z = Constant44;
	Out_Vec3 = Output11;
}

void ScaleColor_Emitter_Func_(inout FSimulationContext Context)
{
	float Constant47 = 1;
	float4 Output0;
	Output0.r = Context.Map.ScaleColor.ScaleRGB.x;
	Output0.g = Context.Map.ScaleColor.ScaleRGB.y;
	Output0.b = Context.Map.ScaleColor.ScaleRGB.z;
	Output0.a = Constant47;
	float4 Result44 = Context.Map.Transient.ParticleColorScaleFactor * Output0;
	float4 Result45 = Context.Map.ScaleColor.ColorValueToScale * Result44;
	Context.Map.Particles.Color = Result45;
	Context.Map.Transient.ParticleColorScaleFactor = Result44;
}

float GetSpawnInterpolation()
{
	return 1.0f;}



void HandlePreviousValuesForSpawn(inout FSimulationContext Context)
{
}


void ReadDataSets(inout FSimulationContext Context)
{
}

void WriteDataSets(inout FSimulationContext Context)
{
}

void Simulate(inout FSimulationContext Context)
{
	EnterStatScope(0 );
	
	
	bool Constant = true;
	Context.Map.ParticleState.LoopParticlesLifetime = Constant;
	bool Constant1 = true;
	Context.Map.DataInstance.Alive = Constant1;
	Context.Map.ParticleState.DeltaTime = Context.Map.Engine.DeltaTime;
	Context.Map.ParticleState.Lifetime = Context.Map.Particles.Lifetime;
	bool Constant2 = false;
	Context.Map.ParticleState.LetInfinitelyLivedParticlesDieWhenEmitterDeactivates = Constant2;
	EnterStatScope(1 );
	ParticleState_Emitter_Func_(Context);
	ExitStatScope();
	Context.Map.ConvertPositionToVector.InputPosition = Context.Map.Particles.Position;
	float3 ConvertPositionToVector_Emitter_Func_Output_NewOutput;
	ConvertPositionToVector_Emitter_Func_(ConvertPositionToVector_Emitter_Func_Output_NewOutput, Context);
	Context.Map.ScratchModule.pos = ConvertPositionToVector_Emitter_Func_Output_NewOutput;
	Context.Map.ScratchModule.alpha = Context.Map.User.user_alpha;
	Context.Map.ScratchModule.beta = Context.Map.User.user_beta;
	float Constant9 = 9.9;
	float Constant10 = 1;
	float Constant11 = 0;
	float Constant12 = 0;
	EnterStatScope(2 );
	ScratchModule_Emitter_Func_(Context);
	ExitStatScope();
	Context.Map.Transient.PhysicsDeltaTime = Context.Map.Engine.DeltaTime;
	Context.Map.SolveForcesAndVelocity.DeltaTime = Context.Map.Transient.PhysicsDeltaTime;
	float3 Constant17 = float3(0,0,0);
	Context.Map.Transient.PhysicsForce = Constant17;
	Context.Map.SolveForcesAndVelocity.Force = Context.Map.Transient.PhysicsForce;
	Context.Map.SolveForcesAndVelocity.Velocity = Context.Map.Particles.Velocity;
	Context.Map.SolveForcesAndVelocity.Mass = Context.Map.Particles.Mass;
	Context.Map.SolveForcesAndVelocity.Position = Context.Map.Particles.Position;
	float3 Constant18 = float3(0,0,0);
	Context.Map.Transient.AdvectionVelocity = Constant18;
	float Constant19 = 0;
	Context.Map.Transient.PhysicsDrag = Constant19;
	bool Constant20 = true;
	Context.Map.Transient.DragIgnoreMass = Constant20;
	float Constant21 = 1000;
	Context.Map.SolveForcesAndVelocity.PreviousVelocity = Context.Map.Particles.Previous.Velocity;
	float Constant22 = 9999;
	bool Constant23 = true;
	Context.Map.SolveForcesAndVelocity.WritetoIntrinsicProperties = Constant23;
	EnterStatScope(3 );
	SolveForcesAndVelocity_Emitter_Func_(Context);
	ExitStatScope();
	float Constant43 = 5;
	float3 VectorFromFloat_Emitter_Func_Output_Vec3;
	VectorFromFloat_Emitter_Func_(VectorFromFloat_Emitter_Func_Output_Vec3, Context);
	Context.Map.ScaleColor.ScaleRGB = VectorFromFloat_Emitter_Func_Output_Vec3;
	Context.Map.ScaleColor.ColorValueToScale = Context.Map.Particles.Initial.Color;
	float4 Constant45 = float4(1,1,1,1);
	Context.Map.Transient.ParticleColorScaleFactor = Constant45;
	float Constant46 = 1;
	EnterStatScope(4 );
	ScaleColor_Emitter_Func_(Context);
	ExitStatScope();
	ExitStatScope();
}
void SimulateMain()
{
EnterStatScope(5 );

	FSimulationContext Context = (FSimulationContext)0;
	Context.Map.Particles.Age = InputDataFloat(0, 0);
	Context.Map.Array.Age = 0;
	Context.Map.Particles.Color.r = InputDataFloat(0, 1);
	Context.Map.Array.Color = 1;
	Context.Map.Particles.Color.g = InputDataFloat(0, 2);
	Context.Map.Array.Color = 2;
	Context.Map.Particles.Color.b = InputDataFloat(0, 3);
	Context.Map.Array.Color = 3;
	Context.Map.Particles.Color.a = InputDataFloat(0, 4);
	Context.Map.Array.Color = 4;
	Context.Map.Particles.DistanceTraveled = InputDataFloat(0, 5);
	Context.Map.Array.DistanceTraveled = 5;
	Context.Map.Particles.Initial.Color.r = InputDataFloat(0, 6);
	Context.Map.Array.Initial.Color = 6;
	Context.Map.Particles.Initial.Color.g = InputDataFloat(0, 7);
	Context.Map.Array.Initial.Color = 7;
	Context.Map.Particles.Initial.Color.b = InputDataFloat(0, 8);
	Context.Map.Array.Initial.Color = 8;
	Context.Map.Particles.Initial.Color.a = InputDataFloat(0, 9);
	Context.Map.Array.Initial.Color = 9;
	Context.Map.Particles.Lifetime = InputDataFloat(0, 10);
	Context.Map.Array.Lifetime = 10;
	Context.Map.Particles.Mass = InputDataFloat(0, 11);
	Context.Map.Array.Mass = 11;
	Context.Map.Particles.MaterialRandom = InputDataFloat(0, 12);
	Context.Map.Array.MaterialRandom = 12;
	Context.Map.Particles.NormalizedAge = InputDataFloat(0, 13);
	Context.Map.Array.NormalizedAge = 13;
	Context.Map.Particles.Position.x = InputDataFloat(0, 14);
	Context.Map.Array.Position = 14;
	Context.Map.Particles.Position.y = InputDataFloat(0, 15);
	Context.Map.Array.Position = 15;
	Context.Map.Particles.Position.z = InputDataFloat(0, 16);
	Context.Map.Array.Position = 16;
	Context.Map.Particles.Presolve.PhysicsForce.x = InputDataFloat(0, 17);
	Context.Map.Array.Presolve.PhysicsForce = 17;
	Context.Map.Particles.Presolve.PhysicsForce.y = InputDataFloat(0, 18);
	Context.Map.Array.Presolve.PhysicsForce = 18;
	Context.Map.Particles.Presolve.PhysicsForce.z = InputDataFloat(0, 19);
	Context.Map.Array.Presolve.PhysicsForce = 19;
	Context.Map.Particles.Presolve.Position.x = InputDataFloat(0, 20);
	Context.Map.Array.Presolve.Position = 20;
	Context.Map.Particles.Presolve.Position.y = InputDataFloat(0, 21);
	Context.Map.Array.Presolve.Position = 21;
	Context.Map.Particles.Presolve.Position.z = InputDataFloat(0, 22);
	Context.Map.Array.Presolve.Position = 22;
	Context.Map.Particles.Presolve.Velocity.x = InputDataFloat(0, 23);
	Context.Map.Array.Presolve.Velocity = 23;
	Context.Map.Particles.Presolve.Velocity.y = InputDataFloat(0, 24);
	Context.Map.Array.Presolve.Velocity = 24;
	Context.Map.Particles.Presolve.Velocity.z = InputDataFloat(0, 25);
	Context.Map.Array.Presolve.Velocity = 25;
	Context.Map.Particles.RibbonUVDistance = InputDataFloat(0, 32);
	Context.Map.Array.RibbonUVDistance = 32;
	Context.Map.Particles.UniqueID = InputDataInt(0, 0);
	Context.Map.Array.UniqueID = 0;
	Context.Map.Particles.Velocity.x = InputDataFloat(0, 33);
	Context.Map.Array.Velocity = 33;
	Context.Map.Particles.Velocity.y = InputDataFloat(0, 34);
	Context.Map.Array.Velocity = 34;
	Context.Map.Particles.Velocity.z = InputDataFloat(0, 35);
	Context.Map.Array.Velocity = 35;
	Context.Map.Particles.Previous.Position = 	Context.Map.Particles.Position;
	Context.Map.Particles.Previous.Velocity = 	Context.Map.Particles.Velocity;
	Context.Map.Engine.DeltaTime = Engine_DeltaTime;
	Context.Map.Emitter.ExecutionState = Emitter_ExecutionState;
	Context.Map.System.ExecutionState = System_ExecutionState;
	Context.Map.User.user_alpha = User_user_alpha;
	Context.Map.User.user_beta = User_user_beta;
	Context.Map.Engine.Emitter.TotalSpawnedParticles = Engine_Emitter_TotalSpawnedParticles;
	Context.Map.Emitter.RandomSeed = Emitter_RandomSeed;
	Context.Map.Engine.Emitter.InstanceSeed = Engine_Emitter_InstanceSeed;
	Context.Map.Engine.System.RandomSeed = Engine_System_RandomSeed;
	ReadDataSets(Context);
EnterStatScope(6 );
	Simulate(Context);
ExitStatScope();
	WriteDataSets(Context);
	{
	bool bValid = Context.Map.DataInstance.Alive;
	int TmpWriteIndex = OutputIndex(0, true, bValid);
	OutputDataFloat(0, 0, TmpWriteIndex, Context.Map.Particles.Age);
	OutputDataFloat(0, 1, TmpWriteIndex, Context.Map.Particles.Color.r);
	OutputDataFloat(0, 2, TmpWriteIndex, Context.Map.Particles.Color.g);
	OutputDataFloat(0, 3, TmpWriteIndex, Context.Map.Particles.Color.b);
	OutputDataFloat(0, 4, TmpWriteIndex, Context.Map.Particles.Color.a);
	OutputDataFloat(0, 5, TmpWriteIndex, Context.Map.Particles.DistanceTraveled);
	OutputDataFloat(0, 6, TmpWriteIndex, Context.Map.Particles.Initial.Color.r);
	OutputDataFloat(0, 7, TmpWriteIndex, Context.Map.Particles.Initial.Color.g);
	OutputDataFloat(0, 8, TmpWriteIndex, Context.Map.Particles.Initial.Color.b);
	OutputDataFloat(0, 9, TmpWriteIndex, Context.Map.Particles.Initial.Color.a);
	OutputDataFloat(0, 10, TmpWriteIndex, Context.Map.Particles.Lifetime);
	OutputDataFloat(0, 11, TmpWriteIndex, Context.Map.Particles.Mass);
	OutputDataFloat(0, 12, TmpWriteIndex, Context.Map.Particles.MaterialRandom);
	OutputDataFloat(0, 13, TmpWriteIndex, Context.Map.Particles.NormalizedAge);
	OutputDataFloat(0, 14, TmpWriteIndex, Context.Map.Particles.Position.x);
	OutputDataFloat(0, 15, TmpWriteIndex, Context.Map.Particles.Position.y);
	OutputDataFloat(0, 16, TmpWriteIndex, Context.Map.Particles.Position.z);
	OutputDataFloat(0, 17, TmpWriteIndex, Context.Map.Particles.Presolve.PhysicsForce.x);
	OutputDataFloat(0, 18, TmpWriteIndex, Context.Map.Particles.Presolve.PhysicsForce.y);
	OutputDataFloat(0, 19, TmpWriteIndex, Context.Map.Particles.Presolve.PhysicsForce.z);
	OutputDataFloat(0, 20, TmpWriteIndex, Context.Map.Particles.Presolve.Position.x);
	OutputDataFloat(0, 21, TmpWriteIndex, Context.Map.Particles.Presolve.Position.y);
	OutputDataFloat(0, 22, TmpWriteIndex, Context.Map.Particles.Presolve.Position.z);
	OutputDataFloat(0, 23, TmpWriteIndex, Context.Map.Particles.Presolve.Velocity.x);
	OutputDataFloat(0, 24, TmpWriteIndex, Context.Map.Particles.Presolve.Velocity.y);
	OutputDataFloat(0, 25, TmpWriteIndex, Context.Map.Particles.Presolve.Velocity.z);
	OutputDataFloat(0, 26, TmpWriteIndex, Context.Map.Particles.Previous.Position.x);
	OutputDataFloat(0, 27, TmpWriteIndex, Context.Map.Particles.Previous.Position.y);
	OutputDataFloat(0, 28, TmpWriteIndex, Context.Map.Particles.Previous.Position.z);
	OutputDataFloat(0, 29, TmpWriteIndex, Context.Map.Particles.Previous.Velocity.x);
	OutputDataFloat(0, 30, TmpWriteIndex, Context.Map.Particles.Previous.Velocity.y);
	OutputDataFloat(0, 31, TmpWriteIndex, Context.Map.Particles.Previous.Velocity.z);
	OutputDataFloat(0, 32, TmpWriteIndex, Context.Map.Particles.RibbonUVDistance);
	OutputDataInt(0, 0, TmpWriteIndex, Context.Map.Particles.UniqueID);
	OutputDataFloat(0, 33, TmpWriteIndex, Context.Map.Particles.Velocity.x);
	OutputDataFloat(0, 34, TmpWriteIndex, Context.Map.Particles.Velocity.y);
	OutputDataFloat(0, 35, TmpWriteIndex, Context.Map.Particles.Velocity.z);
	}
ExitStatScope();
}
#line 845 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"



#if 0 /*BEGIN_RESOURCE_TABLES*/
NULL, 0
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
#if 0 /*DIRECT COMPILE*/
-directcompile -format=VVM_1 -entry=SimulateMain -shaderPlatformName=None -cs E:/Unreal Engine/Projects/Tirocinio/Saved/ShaderDebugInfo/VM/Game/FX/SA_Particles/source/ParticleUpdateScript/NiagaraEmitterInstanceShader.usf -cflags=2097152 -hlslccflags=1048578 -nocrashreports
#endif /*DIRECT COMPILE*/
